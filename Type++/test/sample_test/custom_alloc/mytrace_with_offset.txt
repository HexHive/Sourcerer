 main + 0x19 ==> clang::noteBottomOfStack()
     clang::noteBottomOfStack() + 0x25 ==> getStackPointer()
     clang::noteBottomOfStack() + 0x2a <==
 main + 0x1e <==
 main + 0x32 ==> llvm::InitLLVM::InitLLVM(int&, char const**&, bool)
     llvm::InitLLVM::InitLLVM(int&, char const**&, bool) + 0x25 ==> llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator, 4096ul, 4096ul, 128ul>::BumpPtrAllocatorImpl()
         llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator, 4096ul, 4096ul, 128ul>::BumpPtrAllocatorImpl() + 0x30 ==> llvm::SmallVector<void*, 4u>::SmallVector()
             llvm::SmallVector<void*, 4u>::SmallVector() + 0x18 ==> llvm::SmallVectorImpl<void*>::SmallVectorImpl(unsigned int)
                 llvm::SmallVectorImpl<void*>::SmallVectorImpl(unsigned int) + 0x1b ==> llvm::SmallVectorTemplateBase<void*, true>::SmallVectorTemplateBase(unsigned long)
                     llvm::SmallVectorTemplateBase<void*, true>::SmallVectorTemplateBase(unsigned long) + 0x1b ==> llvm::SmallVectorTemplateCommon<void*, void>::SmallVectorTemplateCommon(unsigned long)
                         llvm::SmallVectorTemplateCommon<void*, void>::SmallVectorTemplateCommon(unsigned long) + 0x1e ==> llvm::SmallVectorTemplateCommon<void*, void>::getFirstEl() const
                         llvm::SmallVectorTemplateCommon<void*, void>::SmallVectorTemplateCommon(unsigned long) + 0x23 <==
                         llvm::SmallVectorTemplateCommon<void*, void>::SmallVectorTemplateCommon(unsigned long) + 0x2e ==> llvm::SmallVectorBase<unsigned int>::SmallVectorBase(void*, unsigned long)
                         llvm::SmallVectorTemplateCommon<void*, void>::SmallVectorTemplateCommon(unsigned long) + 0x33 <==
                     llvm::SmallVectorTemplateBase<void*, true>::SmallVectorTemplateBase(unsigned long) + 0x20 <==
                 llvm::SmallVectorImpl<void*>::SmallVectorImpl(unsigned int) + 0x20 <==
             llvm::SmallVector<void*, 4u>::SmallVector() + 0x1d <==
         llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator, 4096ul, 4096ul, 128ul>::BumpPtrAllocatorImpl() + 0x35 <==
         llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator, 4096ul, 4096ul, 128ul>::BumpPtrAllocatorImpl() + 0x42 ==> llvm::SmallVector<std::pair<void*, unsigned long>, 0u>::SmallVector()
             llvm::SmallVector<std::pair<void*, unsigned long>, 0u>::SmallVector() + 0x15 ==> llvm::SmallVectorImpl<std::pair<void*, unsigned long> >::SmallVectorImpl(unsigned int)
                 llvm::SmallVectorImpl<std::pair<void*, unsigned long> >::SmallVectorImpl(unsigned int) + 0x1b ==> llvm::SmallVectorTemplateBase<std::pair<void*, unsigned long>, true>::SmallVectorTemplateBase(unsigned long)
                     llvm::SmallVectorTemplateBase<std::pair<void*, unsigned long>, true>::SmallVectorTemplateBase(unsigned long) + 0x1b ==> llvm::SmallVectorTemplateCommon<std::pair<void*, unsigned long>, void>::SmallVectorTemplateCommon(unsigned long)
                         llvm::SmallVectorTemplateCommon<std::pair<void*, unsigned long>, void>::SmallVectorTemplateCommon(unsigned long) + 0x1e ==> llvm::SmallVectorTemplateCommon<std::pair<void*, unsigned long>, void>::getFirstEl() const
                         llvm::SmallVectorTemplateCommon<std::pair<void*, unsigned long>, void>::SmallVectorTemplateCommon(unsigned long) + 0x23 <==
                         llvm::SmallVectorTemplateCommon<std::pair<void*, unsigned long>, void>::SmallVectorTemplateCommon(unsigned long) + 0x2e ==> llvm::SmallVectorBase<unsigned int>::SmallVectorBase(void*, unsigned long)
                         llvm::SmallVectorTemplateCommon<std::pair<void*, unsigned long>, void>::SmallVectorTemplateCommon(unsigned long) + 0x33 <==
                     llvm::SmallVectorTemplateBase<std::pair<void*, unsigned long>, true>::SmallVectorTemplateBase(unsigned long) + 0x20 <==
                 llvm::SmallVectorImpl<std::pair<void*, unsigned long> >::SmallVectorImpl(unsigned int) + 0x20 <==
             llvm::SmallVector<std::pair<void*, unsigned long>, 0u>::SmallVector() + 0x1a <==
         llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator, 4096ul, 4096ul, 128ul>::BumpPtrAllocatorImpl() + 0x47 <==
     llvm::InitLLVM::InitLLVM(int&, char const**&, bool) + 0x2a <==
     llvm::InitLLVM::InitLLVM(int&, char const**&, bool) + 0x37 ==> llvm::SmallVector<char const*, 0u>::SmallVector()
         llvm::SmallVector<char const*, 0u>::SmallVector() + 0x15 ==> llvm::SmallVectorImpl<char const*>::SmallVectorImpl(unsigned int)
             llvm::SmallVectorImpl<char const*>::SmallVectorImpl(unsigned int) + 0x1b ==> llvm::SmallVectorTemplateBase<char const*, true>::SmallVectorTemplateBase(unsigned long)
                 llvm::SmallVectorTemplateBase<char const*, true>::SmallVectorTemplateBase(unsigned long) + 0x1b ==> llvm::SmallVectorTemplateCommon<char const*, void>::SmallVectorTemplateCommon(unsigned long)
                     llvm::SmallVectorTemplateCommon<char const*, void>::SmallVectorTemplateCommon(unsigned long) + 0x1e ==> llvm::SmallVectorTemplateCommon<char const*, void>::getFirstEl() const
                     llvm::SmallVectorTemplateCommon<char const*, void>::SmallVectorTemplateCommon(unsigned long) + 0x23 <==
                     llvm::SmallVectorTemplateCommon<char const*, void>::SmallVectorTemplateCommon(unsigned long) + 0x2e ==> llvm::SmallVectorBase<unsigned int>::SmallVectorBase(void*, unsigned long)
                     llvm::SmallVectorTemplateCommon<char const*, void>::SmallVectorTemplateCommon(unsigned long) + 0x33 <==
                 llvm::SmallVectorTemplateBase<char const*, true>::SmallVectorTemplateBase(unsigned long) + 0x20 <==
             llvm::SmallVectorImpl<char const*>::SmallVectorImpl(unsigned int) + 0x20 <==
         llvm::SmallVector<char const*, 0u>::SmallVector() + 0x1a <==
     llvm::InitLLVM::InitLLVM(int&, char const**&, bool) + 0x3c <==
     llvm::InitLLVM::InitLLVM(int&, char const**&, bool) + 0x49 ==> llvm::Optional<llvm::PrettyStackTraceProgram>::Optional()
         llvm::Optional<llvm::PrettyStackTraceProgram>::Optional() + 0x10 ==> llvm::optional_detail::OptionalStorage<llvm::PrettyStackTraceProgram, false>::OptionalStorage()
         llvm::Optional<llvm::PrettyStackTraceProgram>::Optional() + 0x15 <==
     llvm::InitLLVM::InitLLVM(int&, char const**&, bool) + 0x4e <==
     llvm::InitLLVM::InitLLVM(int&, char const**&, bool) + 0x5f ==> llvm::sys::SetOneShotPipeSignalFunction(void (*)())
         llvm::sys::SetOneShotPipeSignalFunction(void (*)()) + 0x1c ==> std::atomic<void (*)()>::exchange(void (*)(), std::memory_order)
             std::atomic<void (*)()>::exchange(void (*)(), std::memory_order) + 0x6c === std::atomic<void (*)()>::exchange(void (*)(), std::memory_order) + 0xd6
         llvm::sys::SetOneShotPipeSignalFunction(void (*)()) + 0x21 <==
         llvm::sys::SetOneShotPipeSignalFunction(void (*)()) + 0x25 ==> RegisterHandlers()
             RegisterHandlers() + 0x12 ==> llvm::ManagedStatic<llvm::sys::SmartMutex<true>, llvm::object_creator<llvm::sys::SmartMutex<true> >, llvm::object_deleter<llvm::sys::SmartMutex<true> > >::operator*()
                 llvm::ManagedStatic<llvm::sys::SmartMutex<true>, llvm::object_creator<llvm::sys::SmartMutex<true> >, llvm::object_deleter<llvm::sys::SmartMutex<true> > >::operator*() + 0x1f ==> std::atomic<void*>::load(std::memory_order) const
                 llvm::ManagedStatic<llvm::sys::SmartMutex<true>, llvm::object_creator<llvm::sys::SmartMutex<true> >, llvm::object_deleter<llvm::sys::SmartMutex<true> > >::operator*() + 0x24 <==
                 llvm::ManagedStatic<llvm::sys::SmartMutex<true>, llvm::object_creator<llvm::sys::SmartMutex<true> >, llvm::object_deleter<llvm::sys::SmartMutex<true> > >::operator*() + 0x48 ==> llvm::ManagedStaticBase::RegisterManagedStatic(void* (*)(), void (*)(void*)) const
                     llvm::ManagedStaticBase::RegisterManagedStatic(void* (*)(), void (*)(void*)) const + 0x4b ==> llvm::llvm_is_multithreaded()
                     llvm::ManagedStaticBase::RegisterManagedStatic(void* (*)(), void (*)(void*)) const + 0x50 <==
                     llvm::ManagedStaticBase::RegisterManagedStatic(void* (*)(), void (*)(void*)) const + 0x5d ==> getManagedStaticMutex()
                         getManagedStaticMutex() + 0x12 ==> void llvm::call_once<void (&)()>(std::once_flag&, void (&)())
                             void llvm::call_once<void (&)()>(std::once_flag&, void (&)()) + 0x1f ==> void (&std::forward<void (&)()>(std::remove_reference<void (&)()>::type&))()
                             void llvm::call_once<void (&)()>(std::once_flag&, void (&)()) + 0x24 <==
                             void llvm::call_once<void (&)()>(std::once_flag&, void (&)()) + 0x2b ==> void std::call_once<void (&)()>(std::once_flag&, void (&)())
                                 void std::call_once<void (&)()>(std::once_flag&, void (&)()) + 0x27 ==> void (&*std::__addressof<void std::call_once<void (&)()>(std::once_flag&, void (&)())::'lambda'()>(void (&)()))()
                                 void std::call_once<void (&)()>(std::once_flag&, void (&)()) + 0x2c <==
                                 void std::call_once<void (&)()>(std::once_flag&, void (&)()) + 0x4b ==> void std::call_once<void (&)()>(std::once_flag&, void (&)())::'lambda0'()::operator void (*)()() const
                                 void std::call_once<void (&)()>(std::once_flag&, void (&)()) + 0x50 <==
                                 void std::call_once<void (&)()>(std::once_flag&, void (&)()) + 0x73 ==> __gthread_once(int*, void (*)())
                                     __gthread_once(int*, void (*)()) + 0x10 ==> __gthread_active_p()
                                     __gthread_once(int*, void (*)()) + 0x15 <==
                                     __gthread_once(int*, void (*)()) + 0x26 ==> pthread_once
                                         pthread_once + 0x0 === __pthread_once + 0x0
                                     __gthread_once(int*, void (*)()) + 0x2b <==
                                 void std::call_once<void (&)()>(std::once_flag&, void (&)()) + 0x78 <==
                             void llvm::call_once<void (&)()>(std::once_flag&, void (&)()) + 0x30 <==
                         getManagedStaticMutex() + 0x17 <==
                     llvm::ManagedStaticBase::RegisterManagedStatic(void* (*)(), void (*)(void*)) const + 0x62 <==
                     llvm::ManagedStaticBase::RegisterManagedStatic(void* (*)(), void (*)(void*)) const + 0x69 ==> std::lock_guard<std::recursive_mutex>::lock_guard(std::recursive_mutex&)
                         std::lock_guard<std::recursive_mutex>::lock_guard(std::recursive_mutex&) + 0x1e ==> std::recursive_mutex::lock()
                             std::recursive_mutex::lock() + 0x13 ==> __gthread_recursive_mutex_lock(pthread_mutex_t*)
                                 __gthread_recursive_mutex_lock(pthread_mutex_t*) + 0x10 ==> __gthread_mutex_lock(pthread_mutex_t*)
                                     __gthread_mutex_lock(pthread_mutex_t*) + 0xc ==> __gthread_active_p()
                                     __gthread_mutex_lock(pthread_mutex_t*) + 0x11 <==
                                     __gthread_mutex_lock(pthread_mutex_t*) + 0x1e ==> pthread_mutex_lock
                                         pthread_mutex_lock + 0x0 === __pthread_mutex_lock + 0x0
                                     __gthread_mutex_lock(pthread_mutex_t*) + 0x23 <==
                                 __gthread_recursive_mutex_lock(pthread_mutex_t*) + 0x15 <==
                             std::recursive_mutex::lock() + 0x18 <==
                         std::lock_guard<std::recursive_mutex>::lock_guard(std::recursive_mutex&) + 0x23 <==
                     llvm::ManagedStaticBase::RegisterManagedStatic(void* (*)(), void (*)(void*)) const + 0x6e <==
                     llvm::ManagedStaticBase::RegisterManagedStatic(void* (*)(), void (*)(void*)) const + 0x74 ==> std::atomic<void*>::load(std::memory_order) const
                     llvm::ManagedStaticBase::RegisterManagedStatic(void* (*)(), void (*)(void*)) const + 0x79 <==
                     llvm::ManagedStaticBase::RegisterManagedStatic(void* (*)(), void (*)(void*)) const + 0x83 ==> llvm::object_creator<llvm::sys::SmartMutex<true> >::call()
                         llvm::object_creator<llvm::sys::SmartMutex<true> >::call() + 0xd ==> operator new(unsigned long)
                             operator new(unsigned long) + 0x0 === operator new(unsigned long) + 0x0
                             operator new(unsigned long) + 0x14 ==> ___lldb_unnamed_symbol3$$libstdc++.so.6
                             operator new(unsigned long) + 0x19 <==
                         llvm::object_creator<llvm::sys::SmartMutex<true> >::call() + 0x12 <==
                         llvm::object_creator<llvm::sys::SmartMutex<true> >::call() + 0x23 ==> memset
                             memset + 0x0 === ___lldb_unnamed_symbol1099$$libc.so.6 + 0x0
                         llvm::object_creator<llvm::sys::SmartMutex<true> >::call() + 0x28 <==
                         llvm::object_creator<llvm::sys::SmartMutex<true> >::call() + 0x2c ==> llvm::sys::SmartMutex<true>::SmartMutex()
                             llvm::sys::SmartMutex<true>::SmartMutex() + 0x17 ==> std::recursive_mutex::recursive_mutex()
                                 std::recursive_mutex::recursive_mutex() + 0x13 ==> std::__recursive_mutex_base::__recursive_mutex_base()
                                 std::recursive_mutex::recursive_mutex() + 0x18 <==
                             llvm::sys::SmartMutex<true>::SmartMutex() + 0x1c <==
                         llvm::object_creator<llvm::sys::SmartMutex<true> >::call() + 0x31 <==
                     llvm::ManagedStaticBase::RegisterManagedStatic(void* (*)(), void (*)(void*)) const + 0x86 <==
                     llvm::ManagedStaticBase::RegisterManagedStatic(void* (*)(), void (*)(void*)) const + 0x97 ==> std::atomic<void*>::store(void*, std::memory_order)
                     llvm::ManagedStaticBase::RegisterManagedStatic(void* (*)(), void (*)(void*)) const + 0x9c <==
                     llvm::ManagedStaticBase::RegisterManagedStatic(void* (*)(), void (*)(void*)) const + 0xbe ==> std::lock_guard<std::recursive_mutex>::~lock_guard()
                         std::lock_guard<std::recursive_mutex>::~lock_guard() + 0x13 ==> std::recursive_mutex::unlock()
                             std::recursive_mutex::unlock() + 0x13 ==> __gthread_recursive_mutex_unlock(pthread_mutex_t*)
                                 __gthread_recursive_mutex_unlock(pthread_mutex_t*) + 0x10 ==> __gthread_mutex_unlock(pthread_mutex_t*)
                                     __gthread_mutex_unlock(pthread_mutex_t*) + 0xc ==> __gthread_active_p()
                                     __gthread_mutex_unlock(pthread_mutex_t*) + 0x11 <==
                                     __gthread_mutex_unlock(pthread_mutex_t*) + 0x1e ==> pthread_mutex_unlock
                                         pthread_mutex_unlock + 0x0 === __pthread_mutex_unlock + 0x0
                                     __gthread_mutex_unlock(pthread_mutex_t*) + 0x23 <==
                                 __gthread_recursive_mutex_unlock(pthread_mutex_t*) + 0x15 <==
                             std::recursive_mutex::unlock() + 0x18 <==
                         std::lock_guard<std::recursive_mutex>::~lock_guard() + 0x18 <==
                     llvm::ManagedStaticBase::RegisterManagedStatic(void* (*)(), void (*)(void*)) const + 0xc3 <==
                 llvm::ManagedStatic<llvm::sys::SmartMutex<true>, llvm::object_creator<llvm::sys::SmartMutex<true> >, llvm::object_deleter<llvm::sys::SmartMutex<true> > >::operator*() + 0x4d <==
                 llvm::ManagedStatic<llvm::sys::SmartMutex<true>, llvm::object_creator<llvm::sys::SmartMutex<true> >, llvm::object_deleter<llvm::sys::SmartMutex<true> > >::operator*() + 0x56 ==> std::atomic<void*>::load(std::memory_order) const
                 llvm::ManagedStatic<llvm::sys::SmartMutex<true>, llvm::object_creator<llvm::sys::SmartMutex<true> >, llvm::object_deleter<llvm::sys::SmartMutex<true> > >::operator*() + 0x5b <==
             RegisterHandlers() + 0x17 <==
             RegisterHandlers() + 0x1e ==> std::lock_guard<llvm::sys::SmartMutex<true> >::lock_guard(llvm::sys::SmartMutex<true>&)
                 std::lock_guard<llvm::sys::SmartMutex<true> >::lock_guard(llvm::sys::SmartMutex<true>&) + 0x1e ==> llvm::sys::SmartMutex<true>::lock()
                     llvm::sys::SmartMutex<true>::lock() + 0x14 ==> llvm::llvm_is_multithreaded()
                     llvm::sys::SmartMutex<true>::lock() + 0x19 <==
                     llvm::sys::SmartMutex<true>::lock() + 0x2a ==> std::recursive_mutex::lock()
                         std::recursive_mutex::lock() + 0x13 ==> __gthread_recursive_mutex_lock(pthread_mutex_t*)
                             __gthread_recursive_mutex_lock(pthread_mutex_t*) + 0x10 ==> __gthread_mutex_lock(pthread_mutex_t*)
                                 __gthread_mutex_lock(pthread_mutex_t*) + 0xc ==> __gthread_active_p()
                                 __gthread_mutex_lock(pthread_mutex_t*) + 0x11 <==
                                 __gthread_mutex_lock(pthread_mutex_t*) + 0x1e ==> pthread_mutex_lock
                                     pthread_mutex_lock + 0x0 === __pthread_mutex_lock + 0x0
                                 __gthread_mutex_lock(pthread_mutex_t*) + 0x23 <==
                             __gthread_recursive_mutex_lock(pthread_mutex_t*) + 0x15 <==
                         std::recursive_mutex::lock() + 0x18 <==
                     llvm::sys::SmartMutex<true>::lock() + 0x2f <==
                 std::lock_guard<llvm::sys::SmartMutex<true> >::lock_guard(llvm::sys::SmartMutex<true>&) + 0x23 <==
             RegisterHandlers() + 0x23 <==
             RegisterHandlers() + 0xc4 ==> CreateSigAltStack()
                 CreateSigAltStack() + 0x1b ==> sigaltstack
                     sigaltstack + 0x0 === sigaltstack + 0x6
                     sigaltstack + 0xb === None + -0xfffffffffed2ffdf
                 CreateSigAltStack() + 0x20 <==
                 CreateSigAltStack() + 0x6d ==> memset
                     memset + 0x0 === ___lldb_unnamed_symbol1099$$libc.so.6 + 0x0
                 CreateSigAltStack() + 0x72 <==
                 CreateSigAltStack() + 0x77 ==> llvm::safe_malloc(unsigned long)
                     llvm::safe_malloc(unsigned long) + 0x10 ==> malloc
                         malloc + 0x0 === __libc_malloc + 0x0
                         __libc_malloc + 0x6f ==> ___lldb_unnamed_symbol414$$libc.so.6
                             ___lldb_unnamed_symbol414$$libc.so.6 + 0xd1e ==> ___lldb_unnamed_symbol413$$libc.so.6
                                 ___lldb_unnamed_symbol413$$libc.so.6 + 0x373 ==> __default_morecore
                                     __default_morecore + 0x8 ==> __sbrk
                                         __sbrk + 0x8c ==> brk
                                             Syscall 0x000000000000000c
                                         __sbrk + 0x91 <==
                                     __default_morecore + 0xd <==
                                 ___lldb_unnamed_symbol413$$libc.so.6 + 0x375 <==
                             ___lldb_unnamed_symbol414$$libc.so.6 + 0xd23 <==
                         __libc_malloc + 0x74 <==
                     llvm::safe_malloc(unsigned long) + 0x15 <==
                 CreateSigAltStack() + 0x7c <==
                 CreateSigAltStack() + 0x9e ==> sigaltstack
                     sigaltstack + 0x0 === sigaltstack + 0x0
                     Syscall 0x0000000000000083
                 CreateSigAltStack() + 0xa3 <==
             RegisterHandlers() + 0xc9 <==
             RegisterHandlers() + 0x106 ==> RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0xb9 ==> unsigned long llvm::array_lengthof<$_1, 16ul>($_1 (&) [16ul])
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0xbe <==
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x183 ==> sigemptyset
                     sigemptyset + 0x0 === sigemptyset + 0x6
                     sigemptyset + 0xb === None + -0xfffffffffed2ffdf
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x188 <==
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x1bf ==> sigaction
                     sigaction + 0x0 === sigaction + 0x6
                     sigaction + 0xb === None + -0xfffffffffed2ffdf
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x1c4 <==
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x1f4 ==> std::__atomic_base<unsigned int>::operator++()
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x1f9 <==
             RegisterHandlers() + 0x10b <==
             RegisterHandlers() + 0x106 ==> RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0xb9 ==> unsigned long llvm::array_lengthof<$_1, 16ul>($_1 (&) [16ul])
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0xbe <==
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x183 ==> sigemptyset
                     sigemptyset + 0x0 === sigemptyset + 0x0
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x188 <==
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x1bf ==> sigaction
                     sigaction + 0x0 === __sigaction + 0x0
                     __sigaction + 0x14 === __libc_sigaction + 0x0
                     Syscall 0x000000000000000d
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x1c4 <==
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x1f4 ==> std::__atomic_base<unsigned int>::operator++()
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x1f9 <==
             RegisterHandlers() + 0x10b <==
             RegisterHandlers() + 0x106 ==> RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0xb9 ==> unsigned long llvm::array_lengthof<$_1, 16ul>($_1 (&) [16ul])
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0xbe <==
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x183 ==> sigemptyset
                     sigemptyset + 0x0 === sigemptyset + 0x0
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x188 <==
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x1bf ==> sigaction
                     sigaction + 0x0 === __sigaction + 0x0
                     __sigaction + 0x14 === __libc_sigaction + 0x0
                     Syscall 0x000000000000000d
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x1c4 <==
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x1f4 ==> std::__atomic_base<unsigned int>::operator++()
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x1f9 <==
             RegisterHandlers() + 0x10b <==
             RegisterHandlers() + 0x106 ==> RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0xb9 ==> unsigned long llvm::array_lengthof<$_1, 16ul>($_1 (&) [16ul])
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0xbe <==
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x183 ==> sigemptyset
                     sigemptyset + 0x0 === sigemptyset + 0x0
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x188 <==
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x1bf ==> sigaction
                     sigaction + 0x0 === __sigaction + 0x0
                     __sigaction + 0x14 === __libc_sigaction + 0x0
                     Syscall 0x000000000000000d
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x1c4 <==
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x1f4 ==> std::__atomic_base<unsigned int>::operator++()
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x1f9 <==
             RegisterHandlers() + 0x10b <==
             RegisterHandlers() + 0x15b ==> RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0xb9 ==> unsigned long llvm::array_lengthof<$_1, 16ul>($_1 (&) [16ul])
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0xbe <==
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x183 ==> sigemptyset
                     sigemptyset + 0x0 === sigemptyset + 0x0
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x188 <==
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x1bf ==> sigaction
                     sigaction + 0x0 === __sigaction + 0x0
                     __sigaction + 0x14 === __libc_sigaction + 0x0
                     Syscall 0x000000000000000d
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x1c4 <==
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x1f4 ==> std::__atomic_base<unsigned int>::operator++()
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x1f9 <==
             RegisterHandlers() + 0x160 <==
             RegisterHandlers() + 0x15b ==> RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0xb9 ==> unsigned long llvm::array_lengthof<$_1, 16ul>($_1 (&) [16ul])
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0xbe <==
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x183 ==> sigemptyset
                     sigemptyset + 0x0 === sigemptyset + 0x0
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x188 <==
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x1bf ==> sigaction
                     sigaction + 0x0 === __sigaction + 0x0
                     __sigaction + 0x14 === __libc_sigaction + 0x0
                     Syscall 0x000000000000000d
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x1c4 <==
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x1f4 ==> std::__atomic_base<unsigned int>::operator++()
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x1f9 <==
             RegisterHandlers() + 0x160 <==
             RegisterHandlers() + 0x15b ==> RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0xb9 ==> unsigned long llvm::array_lengthof<$_1, 16ul>($_1 (&) [16ul])
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0xbe <==
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x183 ==> sigemptyset
                     sigemptyset + 0x0 === sigemptyset + 0x0
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x188 <==
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x1bf ==> sigaction
                     sigaction + 0x0 === __sigaction + 0x0
                     __sigaction + 0x14 === __libc_sigaction + 0x0
                     Syscall 0x000000000000000d
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x1c4 <==
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x1f4 ==> std::__atomic_base<unsigned int>::operator++()
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x1f9 <==
             RegisterHandlers() + 0x160 <==
             RegisterHandlers() + 0x15b ==> RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0xb9 ==> unsigned long llvm::array_lengthof<$_1, 16ul>($_1 (&) [16ul])
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0xbe <==
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x183 ==> sigemptyset
                     sigemptyset + 0x0 === sigemptyset + 0x0
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x188 <==
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x1bf ==> sigaction
                     sigaction + 0x0 === __sigaction + 0x0
                     __sigaction + 0x14 === __libc_sigaction + 0x0
                     Syscall 0x000000000000000d
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x1c4 <==
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x1f4 ==> std::__atomic_base<unsigned int>::operator++()
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x1f9 <==
             RegisterHandlers() + 0x160 <==
             RegisterHandlers() + 0x15b ==> RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0xb9 ==> unsigned long llvm::array_lengthof<$_1, 16ul>($_1 (&) [16ul])
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0xbe <==
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x183 ==> sigemptyset
                     sigemptyset + 0x0 === sigemptyset + 0x0
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x188 <==
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x1bf ==> sigaction
                     sigaction + 0x0 === __sigaction + 0x0
                     __sigaction + 0x14 === __libc_sigaction + 0x0
                     Syscall 0x000000000000000d
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x1c4 <==
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x1f4 ==> std::__atomic_base<unsigned int>::operator++()
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x1f9 <==
             RegisterHandlers() + 0x160 <==
             RegisterHandlers() + 0x15b ==> RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0xb9 ==> unsigned long llvm::array_lengthof<$_1, 16ul>($_1 (&) [16ul])
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0xbe <==
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x183 ==> sigemptyset
                     sigemptyset + 0x0 === sigemptyset + 0x0
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x188 <==
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x1bf ==> sigaction
                     sigaction + 0x0 === __sigaction + 0x0
                     __sigaction + 0x14 === __libc_sigaction + 0x0
                     Syscall 0x000000000000000d
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x1c4 <==
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x1f4 ==> std::__atomic_base<unsigned int>::operator++()
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x1f9 <==
             RegisterHandlers() + 0x160 <==
             RegisterHandlers() + 0x15b ==> RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0xb9 ==> unsigned long llvm::array_lengthof<$_1, 16ul>($_1 (&) [16ul])
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0xbe <==
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x183 ==> sigemptyset
                     sigemptyset + 0x0 === sigemptyset + 0x0
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x188 <==
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x1bf ==> sigaction
                     sigaction + 0x0 === __sigaction + 0x0
                     __sigaction + 0x14 === __libc_sigaction + 0x0
                     Syscall 0x000000000000000d
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x1c4 <==
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x1f4 ==> std::__atomic_base<unsigned int>::operator++()
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x1f9 <==
             RegisterHandlers() + 0x160 <==
             RegisterHandlers() + 0x15b ==> RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0xb9 ==> unsigned long llvm::array_lengthof<$_1, 16ul>($_1 (&) [16ul])
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0xbe <==
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x183 ==> sigemptyset
                     sigemptyset + 0x0 === sigemptyset + 0x0
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x188 <==
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x1bf ==> sigaction
                     sigaction + 0x0 === __sigaction + 0x0
                     __sigaction + 0x14 === __libc_sigaction + 0x0
                     Syscall 0x000000000000000d
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x1c4 <==
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x1f4 ==> std::__atomic_base<unsigned int>::operator++()
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x1f9 <==
             RegisterHandlers() + 0x160 <==
             RegisterHandlers() + 0x15b ==> RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0xb9 ==> unsigned long llvm::array_lengthof<$_1, 16ul>($_1 (&) [16ul])
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0xbe <==
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x183 ==> sigemptyset
                     sigemptyset + 0x0 === sigemptyset + 0x0
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x188 <==
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x1bf ==> sigaction
                     sigaction + 0x0 === __sigaction + 0x0
                     __sigaction + 0x14 === __libc_sigaction + 0x0
                     Syscall 0x000000000000000d
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x1c4 <==
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x1f4 ==> std::__atomic_base<unsigned int>::operator++()
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x1f9 <==
             RegisterHandlers() + 0x160 <==
             RegisterHandlers() + 0x15b ==> RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0xb9 ==> unsigned long llvm::array_lengthof<$_1, 16ul>($_1 (&) [16ul])
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0xbe <==
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x183 ==> sigemptyset
                     sigemptyset + 0x0 === sigemptyset + 0x0
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x188 <==
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x1bf ==> sigaction
                     sigaction + 0x0 === __sigaction + 0x0
                     __sigaction + 0x14 === __libc_sigaction + 0x0
                     Syscall 0x000000000000000d
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x1c4 <==
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x1f4 ==> std::__atomic_base<unsigned int>::operator++()
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x1f9 <==
             RegisterHandlers() + 0x160 <==
             RegisterHandlers() + 0x17a ==> std::atomic<void (*)()>::operator void (*)()() const
                 std::atomic<void (*)()>::operator void (*)()() const + 0x10 ==> std::__atomic_base<void (*)()>::operator void (*)()() const
                 std::atomic<void (*)()>::operator void (*)()() const + 0x15 <==
             RegisterHandlers() + 0x17f <==
             RegisterHandlers() + 0x194 ==> RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0xb9 ==> unsigned long llvm::array_lengthof<$_1, 16ul>($_1 (&) [16ul])
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0xbe <==
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x183 ==> sigemptyset
                     sigemptyset + 0x0 === sigemptyset + 0x0
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x188 <==
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x1bf ==> sigaction
                     sigaction + 0x0 === __sigaction + 0x0
                     __sigaction + 0x14 === __libc_sigaction + 0x0
                     Syscall 0x000000000000000d
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x1c4 <==
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x1f4 ==> std::__atomic_base<unsigned int>::operator++()
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x1f9 <==
             RegisterHandlers() + 0x199 <==
             RegisterHandlers() + 0x1df ==> RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0xb9 ==> unsigned long llvm::array_lengthof<$_1, 16ul>($_1 (&) [16ul])
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0xbe <==
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x183 ==> sigemptyset
                     sigemptyset + 0x0 === sigemptyset + 0x0
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x188 <==
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x1bf ==> sigaction
                     sigaction + 0x0 === __sigaction + 0x0
                     __sigaction + 0x14 === __libc_sigaction + 0x0
                     Syscall 0x000000000000000d
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x1c4 <==
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x1f4 ==> std::__atomic_base<unsigned int>::operator++()
                 RegisterHandlers()::$_2::operator()(int, RegisterHandlers()::SignalKind) const + 0x1f9 <==
             RegisterHandlers() + 0x1e4 <==
             RegisterHandlers() + 0x202 ==> std::lock_guard<llvm::sys::SmartMutex<true> >::~lock_guard()
                 std::lock_guard<llvm::sys::SmartMutex<true> >::~lock_guard() + 0x13 ==> llvm::sys::SmartMutex<true>::unlock()
                     llvm::sys::SmartMutex<true>::unlock() + 0x14 ==> llvm::llvm_is_multithreaded()
                     llvm::sys::SmartMutex<true>::unlock() + 0x19 <==
                     llvm::sys::SmartMutex<true>::unlock() + 0x2a ==> std::recursive_mutex::unlock()
                         std::recursive_mutex::unlock() + 0x13 ==> __gthread_recursive_mutex_unlock(pthread_mutex_t*)
                             __gthread_recursive_mutex_unlock(pthread_mutex_t*) + 0x10 ==> __gthread_mutex_unlock(pthread_mutex_t*)
                                 __gthread_mutex_unlock(pthread_mutex_t*) + 0xc ==> __gthread_active_p()
                                 __gthread_mutex_unlock(pthread_mutex_t*) + 0x11 <==
                                 __gthread_mutex_unlock(pthread_mutex_t*) + 0x1e ==> pthread_mutex_unlock
                                     pthread_mutex_unlock + 0x0 === __pthread_mutex_unlock + 0x0
                                 __gthread_mutex_unlock(pthread_mutex_t*) + 0x23 <==
                             __gthread_recursive_mutex_unlock(pthread_mutex_t*) + 0x15 <==
                         std::recursive_mutex::unlock() + 0x18 <==
                     llvm::sys::SmartMutex<true>::unlock() + 0x2f <==
                 std::lock_guard<llvm::sys::SmartMutex<true> >::~lock_guard() + 0x18 <==
             RegisterHandlers() + 0x207 <==
         llvm::sys::SetOneShotPipeSignalFunction(void (*)()) + 0x2a <==
     llvm::InitLLVM::InitLLVM(int&, char const**&, bool) + 0x64 <==
     llvm::InitLLVM::InitLLVM(int&, char const**&, bool) + 0x79 ==> void llvm::Optional<llvm::PrettyStackTraceProgram>::emplace<int&, char const**&>(int&, char const**&)
         void llvm::Optional<llvm::PrettyStackTraceProgram>::emplace<int&, char const**&>(int&, char const**&) + 0x23 ==> int& std::forward<int&>(std::remove_reference<int&>::type&)
         void llvm::Optional<llvm::PrettyStackTraceProgram>::emplace<int&, char const**&>(int&, char const**&) + 0x28 <==
         void llvm::Optional<llvm::PrettyStackTraceProgram>::emplace<int&, char const**&>(int&, char const**&) + 0x30 ==> char const**& std::forward<char const**&>(std::remove_reference<char const**&>::type&)
         void llvm::Optional<llvm::PrettyStackTraceProgram>::emplace<int&, char const**&>(int&, char const**&) + 0x35 <==
         void llvm::Optional<llvm::PrettyStackTraceProgram>::emplace<int&, char const**&>(int&, char const**&) + 0x40 ==> void llvm::optional_detail::OptionalStorage<llvm::PrettyStackTraceProgram, false>::emplace<int&, char const**&>(int&, char const**&)
             void llvm::optional_detail::OptionalStorage<llvm::PrettyStackTraceProgram, false>::emplace<int&, char const**&>(int&, char const**&) + 0x1f ==> llvm::optional_detail::OptionalStorage<llvm::PrettyStackTraceProgram, false>::reset()
             void llvm::optional_detail::OptionalStorage<llvm::PrettyStackTraceProgram, false>::emplace<int&, char const**&>(int&, char const**&) + 0x24 <==
             void llvm::optional_detail::OptionalStorage<llvm::PrettyStackTraceProgram, false>::emplace<int&, char const**&>(int&, char const**&) + 0x2b ==> llvm::PrettyStackTraceProgram* std::addressof<llvm::PrettyStackTraceProgram>(llvm::PrettyStackTraceProgram&)
                 llvm::PrettyStackTraceProgram* std::addressof<llvm::PrettyStackTraceProgram>(llvm::PrettyStackTraceProgram&) + 0x10 ==> llvm::PrettyStackTraceProgram* std::__addressof<llvm::PrettyStackTraceProgram>(llvm::PrettyStackTraceProgram&)
                 llvm::PrettyStackTraceProgram* std::addressof<llvm::PrettyStackTraceProgram>(llvm::PrettyStackTraceProgram&) + 0x15 <==
             void llvm::optional_detail::OptionalStorage<llvm::PrettyStackTraceProgram, false>::emplace<int&, char const**&>(int&, char const**&) + 0x30 <==
             void llvm::optional_detail::OptionalStorage<llvm::PrettyStackTraceProgram, false>::emplace<int&, char const**&>(int&, char const**&) + 0x38 ==> int& std::forward<int&>(std::remove_reference<int&>::type&)
             void llvm::optional_detail::OptionalStorage<llvm::PrettyStackTraceProgram, false>::emplace<int&, char const**&>(int&, char const**&) + 0x3d <==
             void llvm::optional_detail::OptionalStorage<llvm::PrettyStackTraceProgram, false>::emplace<int&, char const**&>(int&, char const**&) + 0x46 ==> char const**& std::forward<char const**&>(std::remove_reference<char const**&>::type&)
             void llvm::optional_detail::OptionalStorage<llvm::PrettyStackTraceProgram, false>::emplace<int&, char const**&>(int&, char const**&) + 0x4b <==
             void llvm::optional_detail::OptionalStorage<llvm::PrettyStackTraceProgram, false>::emplace<int&, char const**&>(int&, char const**&) + 0x55 ==> llvm::PrettyStackTraceProgram::PrettyStackTraceProgram(int, char const* const*)
                 llvm::PrettyStackTraceProgram::PrettyStackTraceProgram(int, char const* const*) + 0x21 ==> llvm::PrettyStackTraceEntry::PrettyStackTraceEntry()
                     llvm::PrettyStackTraceEntry::PrettyStackTraceEntry() + 0x22 ==> printForSigInfoIfNeeded()
                     llvm::PrettyStackTraceEntry::PrettyStackTraceEntry() + 0x27 <==
                 llvm::PrettyStackTraceProgram::PrettyStackTraceProgram(int, char const* const*) + 0x26 <==
                 llvm::PrettyStackTraceProgram::PrettyStackTraceProgram(int, char const* const*) + 0x48 ==> llvm::EnablePrettyStackTrace()
                     llvm::EnablePrettyStackTrace() + 0x18 ==> __cxa_guard_acquire
                         __cxa_guard_acquire + 0x0 === __cxa_guard_acquire + 0x6
                         __cxa_guard_acquire + 0xb === None + -0xfffffffffed2ffdf
                     llvm::EnablePrettyStackTrace() + 0x1d <==
                     llvm::EnablePrettyStackTrace() + 0x26 ==> RegisterCrashPrinter()
                         RegisterCrashPrinter() + 0xf ==> llvm::sys::AddSignalHandler(void (*)(void*), void*)
                             llvm::sys::AddSignalHandler(void (*)(void*), void*) + 0x18 ==> insertSignalHandler(void (*)(void*), void*)
                                 insertSignalHandler(void (*)(void*), void*) + 0x60 ==> std::atomic<CallbackAndCookie::Status>::compare_exchange_strong(CallbackAndCookie::Status&, CallbackAndCookie::Status, std::memory_order)
                                     std::atomic<CallbackAndCookie::Status>::compare_exchange_strong(CallbackAndCookie::Status&, CallbackAndCookie::Status, std::memory_order) + 0x37 ==> std::__cmpexch_failure_order(std::memory_order)
                                         std::__cmpexch_failure_order(std::memory_order) + 0x13 ==> std::operator&(std::memory_order, std::__memory_order_modifier)
                                         std::__cmpexch_failure_order(std::memory_order) + 0x18 <==
                                         std::__cmpexch_failure_order(std::memory_order) + 0x1a ==> std::__cmpexch_failure_order2(std::memory_order)
                                         std::__cmpexch_failure_order(std::memory_order) + 0x1f <==
                                         std::__cmpexch_failure_order(std::memory_order) + 0x2a ==> std::operator&(std::memory_order, std::__memory_order_modifier)
                                         std::__cmpexch_failure_order(std::memory_order) + 0x2f <==
                                         std::__cmpexch_failure_order(std::memory_order) + 0x34 ==> std::operator|(std::memory_order, std::__memory_order_modifier)
                                         std::__cmpexch_failure_order(std::memory_order) + 0x39 <==
                                     std::atomic<CallbackAndCookie::Status>::compare_exchange_strong(CallbackAndCookie::Status&, CallbackAndCookie::Status, std::memory_order) + 0x3c <==
                                     std::atomic<CallbackAndCookie::Status>::compare_exchange_strong(CallbackAndCookie::Status&, CallbackAndCookie::Status, std::memory_order) + 0x4d ==> std::atomic<CallbackAndCookie::Status>::compare_exchange_strong(CallbackAndCookie::Status&, CallbackAndCookie::Status, std::memory_order, std::memory_order)
                                         std::atomic<CallbackAndCookie::Status>::compare_exchange_strong(CallbackAndCookie::Status&, CallbackAndCookie::Status, std::memory_order, std::memory_order) + 0x21 ==> CallbackAndCookie::Status* std::__addressof<CallbackAndCookie::Status>(CallbackAndCookie::Status&)
                                         std::atomic<CallbackAndCookie::Status>::compare_exchange_strong(CallbackAndCookie::Status&, CallbackAndCookie::Status, std::memory_order, std::memory_order) + 0x26 <==
                                         std::atomic<CallbackAndCookie::Status>::compare_exchange_strong(CallbackAndCookie::Status&, CallbackAndCookie::Status, std::memory_order, std::memory_order) + 0x34 ==> CallbackAndCookie::Status* std::__addressof<CallbackAndCookie::Status>(CallbackAndCookie::Status&)
                                         std::atomic<CallbackAndCookie::Status>::compare_exchange_strong(CallbackAndCookie::Status&, CallbackAndCookie::Status, std::memory_order, std::memory_order) + 0x39 <==
                                         std::atomic<CallbackAndCookie::Status>::compare_exchange_strong(CallbackAndCookie::Status&, CallbackAndCookie::Status, std::memory_order, std::memory_order) + 0x41 ==> CallbackAndCookie::Status* std::__addressof<CallbackAndCookie::Status>(CallbackAndCookie::Status&)
                                         std::atomic<CallbackAndCookie::Status>::compare_exchange_strong(CallbackAndCookie::Status&, CallbackAndCookie::Status, std::memory_order, std::memory_order) + 0x46 <==
                                         std::atomic<CallbackAndCookie::Status>::compare_exchange_strong(CallbackAndCookie::Status&, CallbackAndCookie::Status, std::memory_order, std::memory_order) + 0x77 === std::atomic<CallbackAndCookie::Status>::compare_exchange_strong(CallbackAndCookie::Status&, CallbackAndCookie::Status, std::memory_order, std::memory_order) + 0xab
                                     std::atomic<CallbackAndCookie::Status>::compare_exchange_strong(CallbackAndCookie::Status&, CallbackAndCookie::Status, std::memory_order) + 0x52 <==
                                 insertSignalHandler(void (*)(void*), void*) + 0x65 <==
                                 insertSignalHandler(void (*)(void*), void*) + 0xa0 ==> std::atomic<CallbackAndCookie::Status>::store(CallbackAndCookie::Status, std::memory_order)
                                     std::atomic<CallbackAndCookie::Status>::store(CallbackAndCookie::Status, std::memory_order) + 0x16 ==> CallbackAndCookie::Status* std::__addressof<CallbackAndCookie::Status>(CallbackAndCookie::Status&)
                                     std::atomic<CallbackAndCookie::Status>::store(CallbackAndCookie::Status, std::memory_order) + 0x1b <==
                                     std::atomic<CallbackAndCookie::Status>::store(CallbackAndCookie::Status, std::memory_order) + 0x29 ==> CallbackAndCookie::Status* std::__addressof<CallbackAndCookie::Status>(CallbackAndCookie::Status&)
                                     std::atomic<CallbackAndCookie::Status>::store(CallbackAndCookie::Status, std::memory_order) + 0x2e <==
                                 insertSignalHandler(void (*)(void*), void*) + 0xa5 <==
                             llvm::sys::AddSignalHandler(void (*)(void*), void*) + 0x1d <==
                             llvm::sys::AddSignalHandler(void (*)(void*), void*) + 0x1d ==> RegisterHandlers()
                                 RegisterHandlers() + 0x12 ==> llvm::ManagedStatic<llvm::sys::SmartMutex<true>, llvm::object_creator<llvm::sys::SmartMutex<true> >, llvm::object_deleter<llvm::sys::SmartMutex<true> > >::operator*()
                                     llvm::ManagedStatic<llvm::sys::SmartMutex<true>, llvm::object_creator<llvm::sys::SmartMutex<true> >, llvm::object_deleter<llvm::sys::SmartMutex<true> > >::operator*() + 0x1f ==> std::atomic<void*>::load(std::memory_order) const
                                     llvm::ManagedStatic<llvm::sys::SmartMutex<true>, llvm::object_creator<llvm::sys::SmartMutex<true> >, llvm::object_deleter<llvm::sys::SmartMutex<true> > >::operator*() + 0x24 <==
                                     llvm::ManagedStatic<llvm::sys::SmartMutex<true>, llvm::object_creator<llvm::sys::SmartMutex<true> >, llvm::object_deleter<llvm::sys::SmartMutex<true> > >::operator*() + 0x56 ==> std::atomic<void*>::load(std::memory_order) const
                                     llvm::ManagedStatic<llvm::sys::SmartMutex<true>, llvm::object_creator<llvm::sys::SmartMutex<true> >, llvm::object_deleter<llvm::sys::SmartMutex<true> > >::operator*() + 0x5b <==
                                 RegisterHandlers() + 0x17 <==
                                 RegisterHandlers() + 0x1e ==> std::lock_guard<llvm::sys::SmartMutex<true> >::lock_guard(llvm::sys::SmartMutex<true>&)
                                     std::lock_guard<llvm::sys::SmartMutex<true> >::lock_guard(llvm::sys::SmartMutex<true>&) + 0x1e ==> llvm::sys::SmartMutex<true>::lock()
                                         llvm::sys::SmartMutex<true>::lock() + 0x14 ==> llvm::llvm_is_multithreaded()
                                         llvm::sys::SmartMutex<true>::lock() + 0x19 <==
                                         llvm::sys::SmartMutex<true>::lock() + 0x2a ==> std::recursive_mutex::lock()
                                             std::recursive_mutex::lock() + 0x13 ==> __gthread_recursive_mutex_lock(pthread_mutex_t*)
                                                 __gthread_recursive_mutex_lock(pthread_mutex_t*) + 0x10 ==> __gthread_mutex_lock(pthread_mutex_t*)
                                                     __gthread_mutex_lock(pthread_mutex_t*) + 0xc ==> __gthread_active_p()
                                                     __gthread_mutex_lock(pthread_mutex_t*) + 0x11 <==
                                                     __gthread_mutex_lock(pthread_mutex_t*) + 0x1e ==> pthread_mutex_lock
                                                         pthread_mutex_lock + 0x0 === __pthread_mutex_lock + 0x0
                                                     __gthread_mutex_lock(pthread_mutex_t*) + 0x23 <==
                                                 __gthread_recursive_mutex_lock(pthread_mutex_t*) + 0x15 <==
                                             std::recursive_mutex::lock() + 0x18 <==
                                         llvm::sys::SmartMutex<true>::lock() + 0x2f <==
                                     std::lock_guard<llvm::sys::SmartMutex<true> >::lock_guard(llvm::sys::SmartMutex<true>&) + 0x23 <==
                                 RegisterHandlers() + 0x23 <==
                                 RegisterHandlers() + 0x202 ==> std::lock_guard<llvm::sys::SmartMutex<true> >::~lock_guard()
                                     std::lock_guard<llvm::sys::SmartMutex<true> >::~lock_guard() + 0x13 ==> llvm::sys::SmartMutex<true>::unlock()
                                         llvm::sys::SmartMutex<true>::unlock() + 0x14 ==> llvm::llvm_is_multithreaded()
                                         llvm::sys::SmartMutex<true>::unlock() + 0x19 <==
                                         llvm::sys::SmartMutex<true>::unlock() + 0x2a ==> std::recursive_mutex::unlock()
                                             std::recursive_mutex::unlock() + 0x13 ==> __gthread_recursive_mutex_unlock(pthread_mutex_t*)
                                                 __gthread_recursive_mutex_unlock(pthread_mutex_t*) + 0x10 ==> __gthread_mutex_unlock(pthread_mutex_t*)
                                                     __gthread_mutex_unlock(pthread_mutex_t*) + 0xc ==> __gthread_active_p()
                                                     __gthread_mutex_unlock(pthread_mutex_t*) + 0x11 <==
                                                     __gthread_mutex_unlock(pthread_mutex_t*) + 0x1e ==> pthread_mutex_unlock
                                                         pthread_mutex_unlock + 0x0 === __pthread_mutex_unlock + 0x0
                                                     __gthread_mutex_unlock(pthread_mutex_t*) + 0x23 <==
                                                 __gthread_recursive_mutex_unlock(pthread_mutex_t*) + 0x15 <==
                                             std::recursive_mutex::unlock() + 0x18 <==
                                         llvm::sys::SmartMutex<true>::unlock() + 0x2f <==
                                     std::lock_guard<llvm::sys::SmartMutex<true> >::~lock_guard() + 0x18 <==
                                 RegisterHandlers() + 0x207 <==
                             llvm::sys::AddSignalHandler(void (*)(void*), void*) + 0x22 <==
                         RegisterCrashPrinter() + 0x14 <==
                     llvm::EnablePrettyStackTrace() + 0x2b <==
                     llvm::EnablePrettyStackTrace() + 0x3a ==> __cxa_guard_release
                         __cxa_guard_release + 0x0 === __cxa_guard_release + 0x6
                         __cxa_guard_release + 0xb === None + -0xfffffffffed2ffdf
                     llvm::EnablePrettyStackTrace() + 0x3f <==
                 llvm::PrettyStackTraceProgram::PrettyStackTraceProgram(int, char const* const*) + 0x4d <==
             void llvm::optional_detail::OptionalStorage<llvm::PrettyStackTraceProgram, false>::emplace<int&, char const**&>(int&, char const**&) + 0x5a <==
         void llvm::Optional<llvm::PrettyStackTraceProgram>::emplace<int&, char const**&>(int&, char const**&) + 0x45 <==
     llvm::InitLLVM::InitLLVM(int&, char const**&, bool) + 0x7e <==
     llvm::InitLLVM::InitLLVM(int&, char const**&, bool) + 0x8c ==> llvm::StringRef::StringRef(char const*)
         llvm::StringRef::StringRef(char const*) + 0x34 ==> llvm::StringRef::strLen(char const*)
             llvm::StringRef::strLen(char const*) + 0x10 ==> strlen
                 strlen + 0x0 === ___lldb_unnamed_symbol1077$$libc.so.6 + 0x0
             llvm::StringRef::strLen(char const*) + 0x15 <==
         llvm::StringRef::StringRef(char const*) + 0x39 <==
     llvm::InitLLVM::InitLLVM(int&, char const**&, bool) + 0x91 <==
     llvm::InitLLVM::InitLLVM(int&, char const**&, bool) + 0x9b ==> llvm::sys::PrintStackTraceOnErrorSignal(llvm::StringRef, bool)
         llvm::sys::PrintStackTraceOnErrorSignal(llvm::StringRef, bool) + 0x3a ==> llvm::sys::AddSignalHandler(void (*)(void*), void*)
             llvm::sys::AddSignalHandler(void (*)(void*), void*) + 0x18 ==> insertSignalHandler(void (*)(void*), void*)
                 insertSignalHandler(void (*)(void*), void*) + 0x60 ==> std::atomic<CallbackAndCookie::Status>::compare_exchange_strong(CallbackAndCookie::Status&, CallbackAndCookie::Status, std::memory_order)
                     std::atomic<CallbackAndCookie::Status>::compare_exchange_strong(CallbackAndCookie::Status&, CallbackAndCookie::Status, std::memory_order) + 0x37 ==> std::__cmpexch_failure_order(std::memory_order)
                         std::__cmpexch_failure_order(std::memory_order) + 0x13 ==> std::operator&(std::memory_order, std::__memory_order_modifier)
                         std::__cmpexch_failure_order(std::memory_order) + 0x18 <==
                         std::__cmpexch_failure_order(std::memory_order) + 0x1a ==> std::__cmpexch_failure_order2(std::memory_order)
                         std::__cmpexch_failure_order(std::memory_order) + 0x1f <==
                         std::__cmpexch_failure_order(std::memory_order) + 0x2a ==> std::operator&(std::memory_order, std::__memory_order_modifier)
                         std::__cmpexch_failure_order(std::memory_order) + 0x2f <==
                         std::__cmpexch_failure_order(std::memory_order) + 0x34 ==> std::operator|(std::memory_order, std::__memory_order_modifier)
                         std::__cmpexch_failure_order(std::memory_order) + 0x39 <==
                     std::atomic<CallbackAndCookie::Status>::compare_exchange_strong(CallbackAndCookie::Status&, CallbackAndCookie::Status, std::memory_order) + 0x3c <==
                     std::atomic<CallbackAndCookie::Status>::compare_exchange_strong(CallbackAndCookie::Status&, CallbackAndCookie::Status, std::memory_order) + 0x4d ==> std::atomic<CallbackAndCookie::Status>::compare_exchange_strong(CallbackAndCookie::Status&, CallbackAndCookie::Status, std::memory_order, std::memory_order)
                         std::atomic<CallbackAndCookie::Status>::compare_exchange_strong(CallbackAndCookie::Status&, CallbackAndCookie::Status, std::memory_order, std::memory_order) + 0x21 ==> CallbackAndCookie::Status* std::__addressof<CallbackAndCookie::Status>(CallbackAndCookie::Status&)
                         std::atomic<CallbackAndCookie::Status>::compare_exchange_strong(CallbackAndCookie::Status&, CallbackAndCookie::Status, std::memory_order, std::memory_order) + 0x26 <==
                         std::atomic<CallbackAndCookie::Status>::compare_exchange_strong(CallbackAndCookie::Status&, CallbackAndCookie::Status, std::memory_order, std::memory_order) + 0x34 ==> CallbackAndCookie::Status* std::__addressof<CallbackAndCookie::Status>(CallbackAndCookie::Status&)
                         std::atomic<CallbackAndCookie::Status>::compare_exchange_strong(CallbackAndCookie::Status&, CallbackAndCookie::Status, std::memory_order, std::memory_order) + 0x39 <==
                         std::atomic<CallbackAndCookie::Status>::compare_exchange_strong(CallbackAndCookie::Status&, CallbackAndCookie::Status, std::memory_order, std::memory_order) + 0x41 ==> CallbackAndCookie::Status* std::__addressof<CallbackAndCookie::Status>(CallbackAndCookie::Status&)
                         std::atomic<CallbackAndCookie::Status>::compare_exchange_strong(CallbackAndCookie::Status&, CallbackAndCookie::Status, std::memory_order, std::memory_order) + 0x46 <==
                         std::atomic<CallbackAndCookie::Status>::compare_exchange_strong(CallbackAndCookie::Status&, CallbackAndCookie::Status, std::memory_order, std::memory_order) + 0x77 === std::atomic<CallbackAndCookie::Status>::compare_exchange_strong(CallbackAndCookie::Status&, CallbackAndCookie::Status, std::memory_order, std::memory_order) + 0xab
                     std::atomic<CallbackAndCookie::Status>::compare_exchange_strong(CallbackAndCookie::Status&, CallbackAndCookie::Status, std::memory_order) + 0x52 <==
                 insertSignalHandler(void (*)(void*), void*) + 0x65 <==
                 insertSignalHandler(void (*)(void*), void*) + 0x60 ==> std::atomic<CallbackAndCookie::Status>::compare_exchange_strong(CallbackAndCookie::Status&, CallbackAndCookie::Status, std::memory_order)
                     std::atomic<CallbackAndCookie::Status>::compare_exchange_strong(CallbackAndCookie::Status&, CallbackAndCookie::Status, std::memory_order) + 0x37 ==> std::__cmpexch_failure_order(std::memory_order)
                         std::__cmpexch_failure_order(std::memory_order) + 0x13 ==> std::operator&(std::memory_order, std::__memory_order_modifier)
                         std::__cmpexch_failure_order(std::memory_order) + 0x18 <==
                         std::__cmpexch_failure_order(std::memory_order) + 0x1a ==> std::__cmpexch_failure_order2(std::memory_order)
                         std::__cmpexch_failure_order(std::memory_order) + 0x1f <==
                         std::__cmpexch_failure_order(std::memory_order) + 0x2a ==> std::operator&(std::memory_order, std::__memory_order_modifier)
                         std::__cmpexch_failure_order(std::memory_order) + 0x2f <==
                         std::__cmpexch_failure_order(std::memory_order) + 0x34 ==> std::operator|(std::memory_order, std::__memory_order_modifier)
                         std::__cmpexch_failure_order(std::memory_order) + 0x39 <==
                     std::atomic<CallbackAndCookie::Status>::compare_exchange_strong(CallbackAndCookie::Status&, CallbackAndCookie::Status, std::memory_order) + 0x3c <==
                     std::atomic<CallbackAndCookie::Status>::compare_exchange_strong(CallbackAndCookie::Status&, CallbackAndCookie::Status, std::memory_order) + 0x4d ==> std::atomic<CallbackAndCookie::Status>::compare_exchange_strong(CallbackAndCookie::Status&, CallbackAndCookie::Status, std::memory_order, std::memory_order)
                         std::atomic<CallbackAndCookie::Status>::compare_exchange_strong(CallbackAndCookie::Status&, CallbackAndCookie::Status, std::memory_order, std::memory_order) + 0x21 ==> CallbackAndCookie::Status* std::__addressof<CallbackAndCookie::Status>(CallbackAndCookie::Status&)
                         std::atomic<CallbackAndCookie::Status>::compare_exchange_strong(CallbackAndCookie::Status&, CallbackAndCookie::Status, std::memory_order, std::memory_order) + 0x26 <==
                         std::atomic<CallbackAndCookie::Status>::compare_exchange_strong(CallbackAndCookie::Status&, CallbackAndCookie::Status, std::memory_order, std::memory_order) + 0x34 ==> CallbackAndCookie::Status* std::__addressof<CallbackAndCookie::Status>(CallbackAndCookie::Status&)
                         std::atomic<CallbackAndCookie::Status>::compare_exchange_strong(CallbackAndCookie::Status&, CallbackAndCookie::Status, std::memory_order, std::memory_order) + 0x39 <==
                         std::atomic<CallbackAndCookie::Status>::compare_exchange_strong(CallbackAndCookie::Status&, CallbackAndCookie::Status, std::memory_order, std::memory_order) + 0x41 ==> CallbackAndCookie::Status* std::__addressof<CallbackAndCookie::Status>(CallbackAndCookie::Status&)
                         std::atomic<CallbackAndCookie::Status>::compare_exchange_strong(CallbackAndCookie::Status&, CallbackAndCookie::Status, std::memory_order, std::memory_order) + 0x46 <==
                         std::atomic<CallbackAndCookie::Status>::compare_exchange_strong(CallbackAndCookie::Status&, CallbackAndCookie::Status, std::memory_order, std::memory_order) + 0x77 === std::atomic<CallbackAndCookie::Status>::compare_exchange_strong(CallbackAndCookie::Status&, CallbackAndCookie::Status, std::memory_order, std::memory_order) + 0xab
                     std::atomic<CallbackAndCookie::Status>::compare_exchange_strong(CallbackAndCookie::Status&, CallbackAndCookie::Status, std::memory_order) + 0x52 <==
                 insertSignalHandler(void (*)(void*), void*) + 0x65 <==
                 insertSignalHandler(void (*)(void*), void*) + 0xa0 ==> std::atomic<CallbackAndCookie::Status>::store(CallbackAndCookie::Status, std::memory_order)
                     std::atomic<CallbackAndCookie::Status>::store(CallbackAndCookie::Status, std::memory_order) + 0x16 ==> CallbackAndCookie::Status* std::__addressof<CallbackAndCookie::Status>(CallbackAndCookie::Status&)
                     std::atomic<CallbackAndCookie::Status>::store(CallbackAndCookie::Status, std::memory_order) + 0x1b <==
                     std::atomic<CallbackAndCookie::Status>::store(CallbackAndCookie::Status, std::memory_order) + 0x29 ==> CallbackAndCookie::Status* std::__addressof<CallbackAndCookie::Status>(CallbackAndCookie::Status&)
                     std::atomic<CallbackAndCookie::Status>::store(CallbackAndCookie::Status, std::memory_order) + 0x2e <==
                 insertSignalHandler(void (*)(void*), void*) + 0xa5 <==
             llvm::sys::AddSignalHandler(void (*)(void*), void*) + 0x1d <==
             llvm::sys::AddSignalHandler(void (*)(void*), void*) + 0x1d ==> RegisterHandlers()
                 RegisterHandlers() + 0x12 ==> llvm::ManagedStatic<llvm::sys::SmartMutex<true>, llvm::object_creator<llvm::sys::SmartMutex<true> >, llvm::object_deleter<llvm::sys::SmartMutex<true> > >::operator*()
                     llvm::ManagedStatic<llvm::sys::SmartMutex<true>, llvm::object_creator<llvm::sys::SmartMutex<true> >, llvm::object_deleter<llvm::sys::SmartMutex<true> > >::operator*() + 0x1f ==> std::atomic<void*>::load(std::memory_order) const
                     llvm::ManagedStatic<llvm::sys::SmartMutex<true>, llvm::object_creator<llvm::sys::SmartMutex<true> >, llvm::object_deleter<llvm::sys::SmartMutex<true> > >::operator*() + 0x24 <==
                     llvm::ManagedStatic<llvm::sys::SmartMutex<true>, llvm::object_creator<llvm::sys::SmartMutex<true> >, llvm::object_deleter<llvm::sys::SmartMutex<true> > >::operator*() + 0x56 ==> std::atomic<void*>::load(std::memory_order) const
                     llvm::ManagedStatic<llvm::sys::SmartMutex<true>, llvm::object_creator<llvm::sys::SmartMutex<true> >, llvm::object_deleter<llvm::sys::SmartMutex<true> > >::operator*() + 0x5b <==
                 RegisterHandlers() + 0x17 <==
                 RegisterHandlers() + 0x1e ==> std::lock_guard<llvm::sys::SmartMutex<true> >::lock_guard(llvm::sys::SmartMutex<true>&)
                     std::lock_guard<llvm::sys::SmartMutex<true> >::lock_guard(llvm::sys::SmartMutex<true>&) + 0x1e ==> llvm::sys::SmartMutex<true>::lock()
                         llvm::sys::SmartMutex<true>::lock() + 0x14 ==> llvm::llvm_is_multithreaded()
                         llvm::sys::SmartMutex<true>::lock() + 0x19 <==
                         llvm::sys::SmartMutex<true>::lock() + 0x2a ==> std::recursive_mutex::lock()
                             std::recursive_mutex::lock() + 0x13 ==> __gthread_recursive_mutex_lock(pthread_mutex_t*)
                                 __gthread_recursive_mutex_lock(pthread_mutex_t*) + 0x10 ==> __gthread_mutex_lock(pthread_mutex_t*)
                                     __gthread_mutex_lock(pthread_mutex_t*) + 0xc ==> __gthread_active_p()
                                     __gthread_mutex_lock(pthread_mutex_t*) + 0x11 <==
                                     __gthread_mutex_lock(pthread_mutex_t*) + 0x1e ==> pthread_mutex_lock
                                         pthread_mutex_lock + 0x0 === __pthread_mutex_lock + 0x0
                                     __gthread_mutex_lock(pthread_mutex_t*) + 0x23 <==
                                 __gthread_recursive_mutex_lock(pthread_mutex_t*) + 0x15 <==
                             std::recursive_mutex::lock() + 0x18 <==
                         llvm::sys::SmartMutex<true>::lock() + 0x2f <==
                     std::lock_guard<llvm::sys::SmartMutex<true> >::lock_guard(llvm::sys::SmartMutex<true>&) + 0x23 <==
                 RegisterHandlers() + 0x23 <==
                 RegisterHandlers() + 0x202 ==> std::lock_guard<llvm::sys::SmartMutex<true> >::~lock_guard()
                     std::lock_guard<llvm::sys::SmartMutex<true> >::~lock_guard() + 0x13 ==> llvm::sys::SmartMutex<true>::unlock()
                         llvm::sys::SmartMutex<true>::unlock() + 0x14 ==> llvm::llvm_is_multithreaded()
                         llvm::sys::SmartMutex<true>::unlock() + 0x19 <==
                         llvm::sys::SmartMutex<true>::unlock() + 0x2a ==> std::recursive_mutex::unlock()
                             std::recursive_mutex::unlock() + 0x13 ==> __gthread_recursive_mutex_unlock(pthread_mutex_t*)
                                 __gthread_recursive_mutex_unlock(pthread_mutex_t*) + 0x10 ==> __gthread_mutex_unlock(pthread_mutex_t*)
                                     __gthread_mutex_unlock(pthread_mutex_t*) + 0xc ==> __gthread_active_p()
                                     __gthread_mutex_unlock(pthread_mutex_t*) + 0x11 <==
                                     __gthread_mutex_unlock(pthread_mutex_t*) + 0x1e ==> pthread_mutex_unlock
                                         pthread_mutex_unlock + 0x0 === __pthread_mutex_unlock + 0x0
                                     __gthread_mutex_unlock(pthread_mutex_t*) + 0x23 <==
                                 __gthread_recursive_mutex_unlock(pthread_mutex_t*) + 0x15 <==
                             std::recursive_mutex::unlock() + 0x18 <==
                         llvm::sys::SmartMutex<true>::unlock() + 0x2f <==
                     std::lock_guard<llvm::sys::SmartMutex<true> >::~lock_guard() + 0x18 <==
                 RegisterHandlers() + 0x207 <==
             llvm::sys::AddSignalHandler(void (*)(void*), void*) + 0x22 <==
         llvm::sys::PrintStackTraceOnErrorSignal(llvm::StringRef, bool) + 0x3f <==
     llvm::InitLLVM::InitLLVM(int&, char const**&, bool) + 0xa0 <==
     llvm::InitLLVM::InitLLVM(int&, char const**&, bool) + 0xa0 ==> llvm::install_out_of_memory_new_handler()
         llvm::install_out_of_memory_new_handler() + 0xf ==> std::set_new_handler(void (*)())
             std::set_new_handler(void (*)()) + 0x0 === std::set_new_handler(void (*)()) + 0x6
             std::set_new_handler(void (*)()) + 0xb === None + -0xfffffffffed2ffdf
         llvm::install_out_of_memory_new_handler() + 0x14 <==
     llvm::InitLLVM::InitLLVM(int&, char const**&, bool) + 0xa5 <==
 main + 0x37 <==
 main + 0x3e ==> llvm::setBugReportMsg(char const*)
 main + 0x43 <==
 main + 0x60 ==> llvm::SmallVector<char const*, 256u>::SmallVector<char const**, void>(char const**, char const**)
     llvm::SmallVector<char const*, 256u>::SmallVector<char const**, void>(char const**, char const**) + 0x27 ==> llvm::SmallVectorImpl<char const*>::SmallVectorImpl(unsigned int)
         llvm::SmallVectorImpl<char const*>::SmallVectorImpl(unsigned int) + 0x1b ==> llvm::SmallVectorTemplateBase<char const*, true>::SmallVectorTemplateBase(unsigned long)
             llvm::SmallVectorTemplateBase<char const*, true>::SmallVectorTemplateBase(unsigned long) + 0x1b ==> llvm::SmallVectorTemplateCommon<char const*, void>::SmallVectorTemplateCommon(unsigned long)
                 llvm::SmallVectorTemplateCommon<char const*, void>::SmallVectorTemplateCommon(unsigned long) + 0x1e ==> llvm::SmallVectorTemplateCommon<char const*, void>::getFirstEl() const
                 llvm::SmallVectorTemplateCommon<char const*, void>::SmallVectorTemplateCommon(unsigned long) + 0x23 <==
                 llvm::SmallVectorTemplateCommon<char const*, void>::SmallVectorTemplateCommon(unsigned long) + 0x2e ==> llvm::SmallVectorBase<unsigned int>::SmallVectorBase(void*, unsigned long)
                 llvm::SmallVectorTemplateCommon<char const*, void>::SmallVectorTemplateCommon(unsigned long) + 0x33 <==
             llvm::SmallVectorTemplateBase<char const*, true>::SmallVectorTemplateBase(unsigned long) + 0x20 <==
         llvm::SmallVectorImpl<char const*>::SmallVectorImpl(unsigned int) + 0x20 <==
     llvm::SmallVector<char const*, 256u>::SmallVector<char const**, void>(char const**, char const**) + 0x2c <==
     llvm::SmallVector<char const*, 256u>::SmallVector<char const**, void>(char const**, char const**) + 0x3b ==> void llvm::SmallVectorImpl<char const*>::append<char const**, void>(char const**, char const**)
         void llvm::SmallVectorImpl<char const*>::append<char const**, void>(char const**, char const**) + 0x2a ==> llvm::SmallVectorTemplateCommon<char const*, void>::assertSafeToAddRange(char const* const*, char const* const*)
             llvm::SmallVectorTemplateCommon<char const*, void>::assertSafeToAddRange(char const* const*, char const* const*) + 0x4c ==> llvm::SmallVectorTemplateCommon<char const*, void>::assertSafeToAdd(void const*, unsigned long)
                 llvm::SmallVectorTemplateCommon<char const*, void>::assertSafeToAdd(void const*, unsigned long) + 0x2a ==> llvm::SmallVectorBase<unsigned int>::size() const
                 llvm::SmallVectorTemplateCommon<char const*, void>::assertSafeToAdd(void const*, unsigned long) + 0x2f <==
                 llvm::SmallVectorTemplateCommon<char const*, void>::assertSafeToAdd(void const*, unsigned long) + 0x3e ==> llvm::SmallVectorTemplateCommon<char const*, void>::assertSafeToReferenceAfterResize(void const*, unsigned long)
                     llvm::SmallVectorTemplateCommon<char const*, void>::assertSafeToReferenceAfterResize(void const*, unsigned long) + 0x20 ==> llvm::SmallVectorTemplateCommon<char const*, void>::isSafeToReferenceAfterResize(void const*, unsigned long)
                         llvm::SmallVectorTemplateCommon<char const*, void>::isSafeToReferenceAfterResize(void const*, unsigned long) + 0x23 ==> llvm::SmallVectorTemplateCommon<char const*, void>::isReferenceToStorage(void const*) const
                             llvm::SmallVectorTemplateCommon<char const*, void>::isReferenceToStorage(void const*) const + 0x23 ==> llvm::SmallVectorTemplateCommon<char const*, void>::begin() const
                             llvm::SmallVectorTemplateCommon<char const*, void>::isReferenceToStorage(void const*) const + 0x28 <==
                             llvm::SmallVectorTemplateCommon<char const*, void>::isReferenceToStorage(void const*) const + 0x30 ==> llvm::SmallVectorTemplateCommon<char const*, void>::end() const
                                 llvm::SmallVectorTemplateCommon<char const*, void>::end() const + 0x17 ==> llvm::SmallVectorTemplateCommon<char const*, void>::begin() const
                                 llvm::SmallVectorTemplateCommon<char const*, void>::end() const + 0x1c <==
                                 llvm::SmallVectorTemplateCommon<char const*, void>::end() const + 0x27 ==> llvm::SmallVectorBase<unsigned int>::size() const
                                 llvm::SmallVectorTemplateCommon<char const*, void>::end() const + 0x2c <==
                             llvm::SmallVectorTemplateCommon<char const*, void>::isReferenceToStorage(void const*) const + 0x35 <==
                             llvm::SmallVectorTemplateCommon<char const*, void>::isReferenceToStorage(void const*) const + 0x44 ==> llvm::SmallVectorTemplateCommon<char const*, void>::isReferenceToRange(void const*, void const*, void const*) const
                                 llvm::SmallVectorTemplateCommon<char const*, void>::isReferenceToRange(void const*, void const*, void const*) const + 0x24 ==> bool std::less<void>::operator()<void const, void const>(void const*, void const*) const
                                     bool std::less<void>::operator()<void const, void const>(void const*, void const*) const + 0x20 ==> std::less<void const*>::operator()(void const*, void const*) const
                                     bool std::less<void>::operator()<void const, void const>(void const*, void const*) const + 0x25 <==
                                 llvm::SmallVectorTemplateCommon<char const*, void>::isReferenceToRange(void const*, void const*, void const*) const + 0x29 <==
                                 llvm::SmallVectorTemplateCommon<char const*, void>::isReferenceToRange(void const*, void const*, void const*) const + 0x44 ==> bool std::less<void>::operator()<void const, void const>(void const*, void const*) const
                                     bool std::less<void>::operator()<void const, void const>(void const*, void const*) const + 0x20 ==> std::less<void const*>::operator()(void const*, void const*) const
                                     bool std::less<void>::operator()<void const, void const>(void const*, void const*) const + 0x25 <==
                                 llvm::SmallVectorTemplateCommon<char const*, void>::isReferenceToRange(void const*, void const*, void const*) const + 0x49 <==
                             llvm::SmallVectorTemplateCommon<char const*, void>::isReferenceToStorage(void const*) const + 0x49 <==
                         llvm::SmallVectorTemplateCommon<char const*, void>::isSafeToReferenceAfterResize(void const*, unsigned long) + 0x28 <==
                     llvm::SmallVectorTemplateCommon<char const*, void>::assertSafeToReferenceAfterResize(void const*, unsigned long) + 0x25 <==
                 llvm::SmallVectorTemplateCommon<char const*, void>::assertSafeToAdd(void const*, unsigned long) + 0x43 <==
             llvm::SmallVectorTemplateCommon<char const*, void>::assertSafeToAddRange(char const* const*, char const* const*) + 0x51 <==
             llvm::SmallVectorTemplateCommon<char const*, void>::assertSafeToAddRange(char const* const*, char const* const*) + 0x74 ==> llvm::SmallVectorTemplateCommon<char const*, void>::assertSafeToAdd(void const*, unsigned long)
                 llvm::SmallVectorTemplateCommon<char const*, void>::assertSafeToAdd(void const*, unsigned long) + 0x2a ==> llvm::SmallVectorBase<unsigned int>::size() const
                 llvm::SmallVectorTemplateCommon<char const*, void>::assertSafeToAdd(void const*, unsigned long) + 0x2f <==
                 llvm::SmallVectorTemplateCommon<char const*, void>::assertSafeToAdd(void const*, unsigned long) + 0x3e ==> llvm::SmallVectorTemplateCommon<char const*, void>::assertSafeToReferenceAfterResize(void const*, unsigned long)
                     llvm::SmallVectorTemplateCommon<char const*, void>::assertSafeToReferenceAfterResize(void const*, unsigned long) + 0x20 ==> llvm::SmallVectorTemplateCommon<char const*, void>::isSafeToReferenceAfterResize(void const*, unsigned long)
                         llvm::SmallVectorTemplateCommon<char const*, void>::isSafeToReferenceAfterResize(void const*, unsigned long) + 0x23 ==> llvm::SmallVectorTemplateCommon<char const*, void>::isReferenceToStorage(void const*) const
                             llvm::SmallVectorTemplateCommon<char const*, void>::isReferenceToStorage(void const*) const + 0x23 ==> llvm::SmallVectorTemplateCommon<char const*, void>::begin() const
                             llvm::SmallVectorTemplateCommon<char const*, void>::isReferenceToStorage(void const*) const + 0x28 <==
                             llvm::SmallVectorTemplateCommon<char const*, void>::isReferenceToStorage(void const*) const + 0x30 ==> llvm::SmallVectorTemplateCommon<char const*, void>::end() const
                                 llvm::SmallVectorTemplateCommon<char const*, void>::end() const + 0x17 ==> llvm::SmallVectorTemplateCommon<char const*, void>::begin() const
                                 llvm::SmallVectorTemplateCommon<char const*, void>::end() const + 0x1c <==
                                 llvm::SmallVectorTemplateCommon<char const*, void>::end() const + 0x27 ==> llvm::SmallVectorBase<unsigned int>::size() const
                                 llvm::SmallVectorTemplateCommon<char const*, void>::end() const + 0x2c <==
                             llvm::SmallVectorTemplateCommon<char const*, void>::isReferenceToStorage(void const*) const + 0x35 <==
                             llvm::SmallVectorTemplateCommon<char const*, void>::isReferenceToStorage(void const*) const + 0x44 ==> llvm::SmallVectorTemplateCommon<char const*, void>::isReferenceToRange(void const*, void const*, void const*) const
                                 llvm::SmallVectorTemplateCommon<char const*, void>::isReferenceToRange(void const*, void const*, void const*) const + 0x24 ==> bool std::less<void>::operator()<void const, void const>(void const*, void const*) const
                                     bool std::less<void>::operator()<void const, void const>(void const*, void const*) const + 0x20 ==> std::less<void const*>::operator()(void const*, void const*) const
                                     bool std::less<void>::operator()<void const, void const>(void const*, void const*) const + 0x25 <==
                                 llvm::SmallVectorTemplateCommon<char const*, void>::isReferenceToRange(void const*, void const*, void const*) const + 0x29 <==
                                 llvm::SmallVectorTemplateCommon<char const*, void>::isReferenceToRange(void const*, void const*, void const*) const + 0x44 ==> bool std::less<void>::operator()<void const, void const>(void const*, void const*) const
                                     bool std::less<void>::operator()<void const, void const>(void const*, void const*) const + 0x20 ==> std::less<void const*>::operator()(void const*, void const*) const
                                     bool std::less<void>::operator()<void const, void const>(void const*, void const*) const + 0x25 <==
                                 llvm::SmallVectorTemplateCommon<char const*, void>::isReferenceToRange(void const*, void const*, void const*) const + 0x49 <==
                             llvm::SmallVectorTemplateCommon<char const*, void>::isReferenceToStorage(void const*) const + 0x49 <==
                         llvm::SmallVectorTemplateCommon<char const*, void>::isSafeToReferenceAfterResize(void const*, unsigned long) + 0x28 <==
                     llvm::SmallVectorTemplateCommon<char const*, void>::assertSafeToReferenceAfterResize(void const*, unsigned long) + 0x25 <==
                 llvm::SmallVectorTemplateCommon<char const*, void>::assertSafeToAdd(void const*, unsigned long) + 0x43 <==
             llvm::SmallVectorTemplateCommon<char const*, void>::assertSafeToAddRange(char const* const*, char const* const*) + 0x79 <==
         void llvm::SmallVectorImpl<char const*>::append<char const**, void>(char const**, char const**) + 0x2f <==
         void llvm::SmallVectorImpl<char const*>::append<char const**, void>(char const**, char const**) + 0x37 ==> std::iterator_traits<char const**>::difference_type std::distance<char const**>(char const**, char const**)
             std::iterator_traits<char const**>::difference_type std::distance<char const**>(char const**, char const**) + 0x27 ==> std::iterator_traits<char const**>::iterator_category std::__iterator_category<char const**>(char const** const&)
             std::iterator_traits<char const**>::difference_type std::distance<char const**>(char const**, char const**) + 0x2c <==
             std::iterator_traits<char const**>::difference_type std::distance<char const**>(char const**, char const**) + 0x34 ==> std::iterator_traits<char const**>::difference_type std::__distance<char const**>(char const**, char const**, std::random_access_iterator_tag)
             std::iterator_traits<char const**>::difference_type std::distance<char const**>(char const**, char const**) + 0x39 <==
         void llvm::SmallVectorImpl<char const*>::append<char const**, void>(char const**, char const**) + 0x3c <==
         void llvm::SmallVectorImpl<char const*>::append<char const**, void>(char const**, char const**) + 0x47 ==> llvm::SmallVectorBase<unsigned int>::size() const
         void llvm::SmallVectorImpl<char const*>::append<char const**, void>(char const**, char const**) + 0x4c <==
         void llvm::SmallVectorImpl<char const*>::append<char const**, void>(char const**, char const**) + 0x57 ==> llvm::SmallVectorImpl<char const*>::reserve(unsigned long)
             llvm::SmallVectorImpl<char const*>::reserve(unsigned long) + 0x1e ==> llvm::SmallVectorBase<unsigned int>::capacity() const
             llvm::SmallVectorImpl<char const*>::reserve(unsigned long) + 0x23 <==
         void llvm::SmallVectorImpl<char const*>::append<char const**, void>(char const**, char const**) + 0x5c <==
         void llvm::SmallVectorImpl<char const*>::append<char const**, void>(char const**, char const**) + 0x73 ==> llvm::SmallVectorTemplateCommon<char const*, void>::end()
             llvm::SmallVectorTemplateCommon<char const*, void>::end() + 0x17 ==> llvm::SmallVectorTemplateCommon<char const*, void>::begin()
             llvm::SmallVectorTemplateCommon<char const*, void>::end() + 0x1c <==
             llvm::SmallVectorTemplateCommon<char const*, void>::end() + 0x27 ==> llvm::SmallVectorBase<unsigned int>::size() const
             llvm::SmallVectorTemplateCommon<char const*, void>::end() + 0x2c <==
         void llvm::SmallVectorImpl<char const*>::append<char const**, void>(char const**, char const**) + 0x78 <==
         void llvm::SmallVectorImpl<char const*>::append<char const**, void>(char const**, char const**) + 0x89 ==> void llvm::SmallVectorTemplateBase<char const*, true>::uninitialized_copy<char const*, char const*>(char const**, char const**, char const**, std::enable_if<std::is_same<std::remove_const<char const*>::type, char const*>::value, void>::type*)
             void llvm::SmallVectorTemplateBase<char const*, true>::uninitialized_copy<char const*, char const*>(char const**, char const**, char const**, std::enable_if<std::is_same<std::remove_const<char const*>::type, char const*>::value, void>::type*) + 0x47 ==> memcpy
                 memcpy + 0x0 === ___lldb_unnamed_symbol1092$$libc.so.6 + 0x0
             void llvm::SmallVectorTemplateBase<char const*, true>::uninitialized_copy<char const*, char const*>(char const**, char const**, char const**, std::enable_if<std::is_same<std::remove_const<char const*>::type, char const*>::value, void>::type*) + 0x4c <==
         void llvm::SmallVectorImpl<char const*>::append<char const**, void>(char const**, char const**) + 0x8e <==
         void llvm::SmallVectorImpl<char const*>::append<char const**, void>(char const**, char const**) + 0x9d ==> llvm::SmallVectorBase<unsigned int>::size() const
         void llvm::SmallVectorImpl<char const*>::append<char const**, void>(char const**, char const**) + 0xa2 <==
         void llvm::SmallVectorImpl<char const*>::append<char const**, void>(char const**, char const**) + 0xad ==> llvm::SmallVectorBase<unsigned int>::set_size(unsigned long)
             llvm::SmallVectorBase<unsigned int>::set_size(unsigned long) + 0x23 ==> llvm::SmallVectorBase<unsigned int>::capacity() const
             llvm::SmallVectorBase<unsigned int>::set_size(unsigned long) + 0x28 <==
         void llvm::SmallVectorImpl<char const*>::append<char const**, void>(char const**, char const**) + 0xb2 <==
     llvm::SmallVector<char const*, 256u>::SmallVector<char const**, void>(char const**, char const**) + 0x40 <==
 main + 0x65 <==
 main + 0x65 ==> llvm::sys::Process::FixupStandardFileDescriptors()
     llvm::sys::Process::FixupStandardFileDescriptors() + 0x1a ==> (anonymous namespace)::FDCloser::FDCloser(int&)
     llvm::sys::Process::FixupStandardFileDescriptors() + 0x1f <==
     llvm::sys::Process::FixupStandardFileDescriptors() + 0x68 ==> __errno_location
         __errno_location + 0x0 === __errno_location + 0x6
         __errno_location + 0xb === None + -0xfffffffffed2ffdf
     llvm::sys::Process::FixupStandardFileDescriptors() + 0x6d <==
     llvm::sys::Process::FixupStandardFileDescriptors() + 0xa4 ==> decltype(auto) llvm::sys::RetryAfterSignal<int, int (int, stat*), int, stat*>(int const&, int  const(&)(int, stat*), int const&, stat* const&)
         decltype(auto) llvm::sys::RetryAfterSignal<int, int (int, stat*), int, stat*>(int const&, int  const(&)(int, stat*), int const&, stat* const&) + 0x18 ==> __errno_location
             __errno_location + 0x0 === __errno_location + 0x0
         decltype(auto) llvm::sys::RetryAfterSignal<int, int (int, stat*), int, stat*>(int const&, int  const(&)(int, stat*), int const&, stat* const&) + 0x1d <==
         decltype(auto) llvm::sys::RetryAfterSignal<int, int (int, stat*), int, stat*>(int const&, int  const(&)(int, stat*), int const&, stat* const&) + 0x34 ==> __fstat
             __fstat + 0xe === __fxstat + 0x0
             __fxstat + 0x0 === __fxstat + 0x6
             __fxstat + 0xb === None + -0xfffffffffed2ffdf
         decltype(auto) llvm::sys::RetryAfterSignal<int, int (int, stat*), int, stat*>(int const&, int  const(&)(int, stat*), int const&, stat* const&) + 0x36 <==
     llvm::sys::Process::FixupStandardFileDescriptors() + 0xa9 <==
     llvm::sys::Process::FixupStandardFileDescriptors() + 0x152 ==> __errno_location
         __errno_location + 0x0 === __errno_location + 0x0
     llvm::sys::Process::FixupStandardFileDescriptors() + 0x157 <==
     llvm::sys::Process::FixupStandardFileDescriptors() + 0x68 ==> __errno_location
         __errno_location + 0x0 === __errno_location + 0x0
     llvm::sys::Process::FixupStandardFileDescriptors() + 0x6d <==
     llvm::sys::Process::FixupStandardFileDescriptors() + 0xa4 ==> decltype(auto) llvm::sys::RetryAfterSignal<int, int (int, stat*), int, stat*>(int const&, int  const(&)(int, stat*), int const&, stat* const&)
         decltype(auto) llvm::sys::RetryAfterSignal<int, int (int, stat*), int, stat*>(int const&, int  const(&)(int, stat*), int const&, stat* const&) + 0x18 ==> __errno_location
             __errno_location + 0x0 === __errno_location + 0x0
         decltype(auto) llvm::sys::RetryAfterSignal<int, int (int, stat*), int, stat*>(int const&, int  const(&)(int, stat*), int const&, stat* const&) + 0x1d <==
         decltype(auto) llvm::sys::RetryAfterSignal<int, int (int, stat*), int, stat*>(int const&, int  const(&)(int, stat*), int const&, stat* const&) + 0x34 ==> __fstat
             __fstat + 0xe === __fxstat + 0x0
             __fxstat + 0x0 === __fxstat64 + 0x0
             Syscall 0x0000000000000005
         decltype(auto) llvm::sys::RetryAfterSignal<int, int (int, stat*), int, stat*>(int const&, int  const(&)(int, stat*), int const&, stat* const&) + 0x36 <==
     llvm::sys::Process::FixupStandardFileDescriptors() + 0xa9 <==
     llvm::sys::Process::FixupStandardFileDescriptors() + 0x152 ==> __errno_location
         __errno_location + 0x0 === __errno_location + 0x0
     llvm::sys::Process::FixupStandardFileDescriptors() + 0x157 <==
     llvm::sys::Process::FixupStandardFileDescriptors() + 0x68 ==> __errno_location
         __errno_location + 0x0 === __errno_location + 0x0
     llvm::sys::Process::FixupStandardFileDescriptors() + 0x6d <==
     llvm::sys::Process::FixupStandardFileDescriptors() + 0xa4 ==> decltype(auto) llvm::sys::RetryAfterSignal<int, int (int, stat*), int, stat*>(int const&, int  const(&)(int, stat*), int const&, stat* const&)
         decltype(auto) llvm::sys::RetryAfterSignal<int, int (int, stat*), int, stat*>(int const&, int  const(&)(int, stat*), int const&, stat* const&) + 0x18 ==> __errno_location
             __errno_location + 0x0 === __errno_location + 0x0
         decltype(auto) llvm::sys::RetryAfterSignal<int, int (int, stat*), int, stat*>(int const&, int  const(&)(int, stat*), int const&, stat* const&) + 0x1d <==
         decltype(auto) llvm::sys::RetryAfterSignal<int, int (int, stat*), int, stat*>(int const&, int  const(&)(int, stat*), int const&, stat* const&) + 0x34 ==> __fstat
             __fstat + 0xe === __fxstat + 0x0
             __fxstat + 0x0 === __fxstat64 + 0x0
             Syscall 0x0000000000000005
         decltype(auto) llvm::sys::RetryAfterSignal<int, int (int, stat*), int, stat*>(int const&, int  const(&)(int, stat*), int const&, stat* const&) + 0x36 <==
     llvm::sys::Process::FixupStandardFileDescriptors() + 0xa9 <==
     llvm::sys::Process::FixupStandardFileDescriptors() + 0x152 ==> __errno_location
         __errno_location + 0x0 === __errno_location + 0x0
     llvm::sys::Process::FixupStandardFileDescriptors() + 0x157 <==
     llvm::sys::Process::FixupStandardFileDescriptors() + 0x2ac ==> std::error_code::error_code()
         std::error_code::error_code() + 0x1a ==> std::_V2::system_category()
             std::_V2::system_category() + 0x0 === std::_V2::system_category() + 0x6
             std::_V2::system_category() + 0xb === None + -0xfffffffffed2ffdf
         std::error_code::error_code() + 0x1f <==
     llvm::sys::Process::FixupStandardFileDescriptors() + 0x2b1 <==
     llvm::sys::Process::FixupStandardFileDescriptors() + 0x2bf ==> (anonymous namespace)::FDCloser::~FDCloser()
     llvm::sys::Process::FixupStandardFileDescriptors() + 0x2c4 <==
 main + 0x6a <==
 main + 0x7e ==> std::error_code::operator bool() const
 main + 0x83 <==
 main + 0xa6 ==> llvm::InitializeAllTargets()
     llvm::InitializeAllTargets() + 0x4 ==> llvm::InitializeAllTargetInfos()
         llvm::InitializeAllTargetInfos() + 0x4 ==> LLVMInitializeX86TargetInfo
             LLVMInitializeX86TargetInfo + 0x8 ==> llvm::getTheX86_32Target()
                 llvm::getTheX86_32Target() + 0x18 ==> __cxa_guard_acquire
                     __cxa_guard_acquire + 0x0 === __cxa_guard_acquire + 0x0
                 llvm::getTheX86_32Target() + 0x1d <==
                 llvm::getTheX86_32Target() + 0x2d ==> llvm::Target::Target()
                 llvm::getTheX86_32Target() + 0x32 <==
                 llvm::getTheX86_32Target() + 0x39 ==> __cxa_guard_release
                     __cxa_guard_release + 0x0 === __cxa_guard_release + 0x0
                 llvm::getTheX86_32Target() + 0x3e <==
             LLVMInitializeX86TargetInfo + 0xd <==
             LLVMInitializeX86TargetInfo + 0x29 ==> llvm::RegisterTarget<(llvm::Triple::ArchType)33, true>::RegisterTarget(llvm::Target&, char const*, char const*, char const*)
                 llvm::RegisterTarget<(llvm::Triple::ArchType)33, true>::RegisterTarget(llvm::Target&, char const*, char const*, char const*) + 0x39 ==> llvm::TargetRegistry::RegisterTarget(llvm::Target&, char const*, char const*, char const*, bool (*)(llvm::Triple::ArchType), bool)
                 llvm::RegisterTarget<(llvm::Triple::ArchType)33, true>::RegisterTarget(llvm::Target&, char const*, char const*, char const*) + 0x3e <==
             LLVMInitializeX86TargetInfo + 0x2e <==
             LLVMInitializeX86TargetInfo + 0x2e ==> llvm::getTheX86_64Target()
                 llvm::getTheX86_64Target() + 0x18 ==> __cxa_guard_acquire
                     __cxa_guard_acquire + 0x0 === __cxa_guard_acquire + 0x0
                 llvm::getTheX86_64Target() + 0x1d <==
                 llvm::getTheX86_64Target() + 0x2d ==> llvm::Target::Target()
                 llvm::getTheX86_64Target() + 0x32 <==
                 llvm::getTheX86_64Target() + 0x39 ==> __cxa_guard_release
                     __cxa_guard_release + 0x0 === __cxa_guard_release + 0x0
                 llvm::getTheX86_64Target() + 0x3e <==
             LLVMInitializeX86TargetInfo + 0x33 <==
             LLVMInitializeX86TargetInfo + 0x4f ==> llvm::RegisterTarget<(llvm::Triple::ArchType)34, true>::RegisterTarget(llvm::Target&, char const*, char const*, char const*)
                 llvm::RegisterTarget<(llvm::Triple::ArchType)34, true>::RegisterTarget(llvm::Target&, char const*, char const*, char const*) + 0x39 ==> llvm::TargetRegistry::RegisterTarget(llvm::Target&, char const*, char const*, char const*, bool (*)(llvm::Triple::ArchType), bool)
                 llvm::RegisterTarget<(llvm::Triple::ArchType)34, true>::RegisterTarget(llvm::Target&, char const*, char const*, char const*) + 0x3e <==
             LLVMInitializeX86TargetInfo + 0x54 <==
         llvm::InitializeAllTargetInfos() + 0x9 <==
     llvm::InitializeAllTargets() + 0x9 <==
     llvm::InitializeAllTargets() + 0x9 ==> LLVMInitializeX86Target
         LLVMInitializeX86Target + 0x8 ==> llvm::getTheX86_32Target()
         LLVMInitializeX86Target + 0xd <==
         LLVMInitializeX86Target + 0x14 ==> llvm::RegisterTargetMachine<llvm::X86TargetMachine>::RegisterTargetMachine(llvm::Target&)
             llvm::RegisterTargetMachine<llvm::X86TargetMachine>::RegisterTargetMachine(llvm::Target&) + 0x1b ==> llvm::TargetRegistry::RegisterTargetMachine(llvm::Target&, llvm::TargetMachine* (*)(llvm::Target const&, llvm::Triple const&, llvm::StringRef, llvm::StringRef, llvm::TargetOptions const&, llvm::Optional<llvm::Reloc::Model>, llvm::Optional<llvm::CodeModel::Model>, llvm::CodeGenOpt::Level, bool))
             llvm::RegisterTargetMachine<llvm::X86TargetMachine>::RegisterTargetMachine(llvm::Target&) + 0x20 <==
         LLVMInitializeX86Target + 0x19 <==
         LLVMInitializeX86Target + 0x19 ==> llvm::getTheX86_64Target()
         LLVMInitializeX86Target + 0x1e <==
         LLVMInitializeX86Target + 0x25 ==> llvm::RegisterTargetMachine<llvm::X86TargetMachine>::RegisterTargetMachine(llvm::Target&)
             llvm::RegisterTargetMachine<llvm::X86TargetMachine>::RegisterTargetMachine(llvm::Target&) + 0x1b ==> llvm::TargetRegistry::RegisterTargetMachine(llvm::Target&, llvm::TargetMachine* (*)(llvm::Target const&, llvm::Triple const&, llvm::StringRef, llvm::StringRef, llvm::TargetOptions const&, llvm::Optional<llvm::Reloc::Model>, llvm::Optional<llvm::CodeModel::Model>, llvm::CodeGenOpt::Level, bool))
             llvm::RegisterTargetMachine<llvm::X86TargetMachine>::RegisterTargetMachine(llvm::Target&) + 0x20 <==
         LLVMInitializeX86Target + 0x2a <==
         LLVMInitializeX86Target + 0x2a ==> llvm::PassRegistry::getPassRegistry()
             llvm::PassRegistry::getPassRegistry() + 0xe ==> llvm::ManagedStatic<llvm::PassRegistry, llvm::object_creator<llvm::PassRegistry>, llvm::object_deleter<llvm::PassRegistry> >::operator*()
                 llvm::ManagedStatic<llvm::PassRegistry, llvm::object_creator<llvm::PassRegistry>, llvm::object_deleter<llvm::PassRegistry> >::operator*() + 0x1f ==> std::atomic<void*>::load(std::memory_order) const
                 llvm::ManagedStatic<llvm::PassRegistry, llvm::object_creator<llvm::PassRegistry>, llvm::object_deleter<llvm::PassRegistry> >::operator*() + 0x24 <==
                 llvm::ManagedStatic<llvm::PassRegistry, llvm::object_creator<llvm::PassRegistry>, llvm::object_deleter<llvm::PassRegistry> >::operator*() + 0x56 ==> std::atomic<void*>::load(std::memory_order) const
                 llvm::ManagedStatic<llvm::PassRegistry, llvm::object_creator<llvm::PassRegistry>, llvm::object_deleter<llvm::PassRegistry> >::operator*() + 0x5b <==
             llvm::PassRegistry::getPassRegistry() + 0x13 <==
         LLVMInitializeX86Target + 0x2f <==
         LLVMInitializeX86Target + 0x37 ==> llvm::initializeX86LowerAMXTypeLegacyPassPass(llvm::PassRegistry&)
             llvm::initializeX86LowerAMXTypeLegacyPassPass(llvm::PassRegistry&) + 0x10 ==> std::reference_wrapper<llvm::PassRegistry> std::ref<llvm::PassRegistry>(llvm::PassRegistry&)
                 std::reference_wrapper<llvm::PassRegistry> std::ref<llvm::PassRegistry>(llvm::PassRegistry&) + 0x14 ==> std::reference_wrapper<llvm::PassRegistry>::reference_wrapper<llvm::PassRegistry&, void, llvm::PassRegistry*>(llvm::PassRegistry&)
                     std::reference_wrapper<llvm::PassRegistry>::reference_wrapper<llvm::PassRegistry&, void, llvm::PassRegistry*>(llvm::PassRegistry&) + 0x1c ==> llvm::PassRegistry& std::forward<llvm::PassRegistry&>(std::remove_reference<llvm::PassRegistry&>::type&)
                     std::reference_wrapper<llvm::PassRegistry>::reference_wrapper<llvm::PassRegistry&, void, llvm::PassRegistry*>(llvm::PassRegistry&) + 0x21 <==
                     std::reference_wrapper<llvm::PassRegistry>::reference_wrapper<llvm::PassRegistry&, void, llvm::PassRegistry*>(llvm::PassRegistry&) + 0x24 ==> std::reference_wrapper<llvm::PassRegistry>::_S_fun(llvm::PassRegistry&)
                         std::reference_wrapper<llvm::PassRegistry>::_S_fun(llvm::PassRegistry&) + 0x10 ==> llvm::PassRegistry* std::__addressof<llvm::PassRegistry>(llvm::PassRegistry&)
                         std::reference_wrapper<llvm::PassRegistry>::_S_fun(llvm::PassRegistry&) + 0x15 <==
                     std::reference_wrapper<llvm::PassRegistry>::reference_wrapper<llvm::PassRegistry&, void, llvm::PassRegistry*>(llvm::PassRegistry&) + 0x29 <==
                 std::reference_wrapper<llvm::PassRegistry> std::ref<llvm::PassRegistry>(llvm::PassRegistry&) + 0x19 <==
             llvm::initializeX86LowerAMXTypeLegacyPassPass(llvm::PassRegistry&) + 0x15 <==
             llvm::initializeX86LowerAMXTypeLegacyPassPass(llvm::PassRegistry&) + 0x2b ==> void llvm::call_once<void* (&)(llvm::PassRegistry&), std::reference_wrapper<llvm::PassRegistry> >(std::once_flag&, void* (&)(llvm::PassRegistry&), std::reference_wrapper<llvm::PassRegistry>&&)
                 void llvm::call_once<void* (&)(llvm::PassRegistry&), std::reference_wrapper<llvm::PassRegistry> >(std::once_flag&, void* (&)(llvm::PassRegistry&), std::reference_wrapper<llvm::PassRegistry>&&) + 0x23 ==> void* (&std::forward<void* (&)(llvm::PassRegistry&)>(std::remove_reference<void* (&)(llvm::PassRegistry&)>::type&))(llvm::PassRegistry&)
                 void llvm::call_once<void* (&)(llvm::PassRegistry&), std::reference_wrapper<llvm::PassRegistry> >(std::once_flag&, void* (&)(llvm::PassRegistry&), std::reference_wrapper<llvm::PassRegistry>&&) + 0x28 <==
                 void llvm::call_once<void* (&)(llvm::PassRegistry&), std::reference_wrapper<llvm::PassRegistry> >(std::once_flag&, void* (&)(llvm::PassRegistry&), std::reference_wrapper<llvm::PassRegistry>&&) + 0x30 ==> std::reference_wrapper<llvm::PassRegistry>&& std::forward<std::reference_wrapper<llvm::PassRegistry> >(std::remove_reference<std::reference_wrapper<llvm::PassRegistry> >::type&)
                 void llvm::call_once<void* (&)(llvm::PassRegistry&), std::reference_wrapper<llvm::PassRegistry> >(std::once_flag&, void* (&)(llvm::PassRegistry&), std::reference_wrapper<llvm::PassRegistry>&&) + 0x35 <==
                 void llvm::call_once<void* (&)(llvm::PassRegistry&), std::reference_wrapper<llvm::PassRegistry> >(std::once_flag&, void* (&)(llvm::PassRegistry&), std::reference_wrapper<llvm::PassRegistry>&&) + 0x40 ==> void std::call_once<void* (&)(llvm::PassRegistry&), std::reference_wrapper<llvm::PassRegistry> >(std::once_flag&, void* (&)(llvm::PassRegistry&), std::reference_wrapper<llvm::PassRegistry>&&)
                     void std::call_once<void* (&)(llvm::PassRegistry&), std::reference_wrapper<llvm::PassRegistry> >(std::once_flag&, void* (&)(llvm::PassRegistry&), std::reference_wrapper<llvm::PassRegistry>&&) + 0x33 ==> void* (&*std::__addressof<void std::call_once<void* (&)(llvm::PassRegistry&), std::reference_wrapper<llvm::PassRegistry> >(std::once_flag&, void* (&)(llvm::PassRegistry&), std::reference_wrapper<llvm::PassRegistry>&&)::'lambda'()>(void* (&)(llvm::PassRegistry&)))(llvm::PassRegistry&)
                     void std::call_once<void* (&)(llvm::PassRegistry&), std::reference_wrapper<llvm::PassRegistry> >(std::once_flag&, void* (&)(llvm::PassRegistry&), std::reference_wrapper<llvm::PassRegistry>&&) + 0x38 <==
                     void std::call_once<void* (&)(llvm::PassRegistry&), std::reference_wrapper<llvm::PassRegistry> >(std::once_flag&, void* (&)(llvm::PassRegistry&), std::reference_wrapper<llvm::PassRegistry>&&) + 0x57 ==> void std::call_once<void* (&)(llvm::PassRegistry&), std::reference_wrapper<llvm::PassRegistry> >(std::once_flag&, void* (&)(llvm::PassRegistry&), std::reference_wrapper<llvm::PassRegistry>&&)::'lambda0'()::operator void (*)()() const
                     void std::call_once<void* (&)(llvm::PassRegistry&), std::reference_wrapper<llvm::PassRegistry> >(std::once_flag&, void* (&)(llvm::PassRegistry&), std::reference_wrapper<llvm::PassRegistry>&&) + 0x5c <==
                     void std::call_once<void* (&)(llvm::PassRegistry&), std::reference_wrapper<llvm::PassRegistry> >(std::once_flag&, void* (&)(llvm::PassRegistry&), std::reference_wrapper<llvm::PassRegistry>&&) + 0x7f ==> __gthread_once(int*, void (*)())
                         __gthread_once(int*, void (*)()) + 0x10 ==> __gthread_active_p()
                         __gthread_once(int*, void (*)()) + 0x15 <==
                         __gthread_once(int*, void (*)()) + 0x26 ==> pthread_once
                             pthread_once + 0x0 === __pthread_once + 0x0
                             __pthread_once + 0x10 === __pthread_once_slow + 0x0
                             __pthread_once_slow + 0xb8 ==> _pthread_cleanup_push
                             __pthread_once_slow + 0xbd <==
                             __pthread_once_slow + 0xbd ==> __once_proxy
                                 __once_proxy + 0x10 ==> None
